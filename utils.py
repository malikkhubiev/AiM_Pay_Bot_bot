from config import (
    SECRET_CODE
)
import logging as log
import httpx
from loader import *
from aiogram.dispatcher.middlewares import BaseMiddleware
from aiogram.dispatcher.handler import CancelHandler
from time import time

log.basicConfig(level=log.DEBUG)
logger = log.getLogger(__name__)

async def send_request(url, method="GET", headers=None, **kwargs):
    if headers is None:
        headers = {}
    headers["X-Secret-Code"] = SECRET_CODE  # –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫

    async with httpx.AsyncClient() as client:
        try:
            # –í—ã–±–æ—Ä –º–µ—Ç–æ–¥–∞ –∑–∞–ø—Ä–æ—Å–∞
            if method.upper() == "POST":
                response = await client.post(url, headers=headers, **kwargs)
            elif method.upper() == "GET":
                response = await client.get(url, headers=headers, **kwargs)
            elif method.upper() == "PUT":
                response = await client.put(url, headers=headers, **kwargs)
            elif method.upper() == "DELETE":
                response = await client.delete(url, headers=headers, **kwargs)
            else:
                raise ValueError(f"Unsupported HTTP method: {method}")

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å –æ—Ç–≤–µ—Ç–∞
            response.raise_for_status()  # –í—ã–∑—ã–≤–∞–µ—Ç –∏—Å–∫–ª—é—á–µ–Ω–∏–µ –¥–ª—è –æ—à–∏–±–æ–∫ —Å—Ç–∞—Ç—É—Å–∞

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º Content-Type
            content_type = response.headers.get("Content-Type", "")

            if content_type.startswith("application/json"):
                return response.json()  # –í–æ–∑–≤—Ä–∞—â–∞–µ–º JSON-–æ—Ç–≤–µ—Ç
            elif content_type.startswith("application/vnd.openxmlformats"):
                return response.content  # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –±–∏–Ω–∞—Ä–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ (—Ñ–∞–π–ª)
            elif content_type.startswith("application/pdf"):
                return response.content  # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –±–∏–Ω–∞—Ä–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ (—Ñ–∞–π–ª PDF)
            else:
                logger.error(f"–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π Content-Type: {content_type}")
                return {"status": "error", "message": "–°–µ—Ä–≤–µ—Ä –≤–µ—Ä–Ω—É–ª –¥–∞–Ω–Ω—ã–µ –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–≥–æ —Ñ–æ—Ä–º–∞—Ç–∞."}

        except httpx.RequestError as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –∑–∞–ø—Ä–æ—Å–∞: {e}")
            return {"status": "error", "message": "–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–∏ –∫ —Å–µ—Ä–≤–µ—Ä—É."}
        except httpx.HTTPStatusError as e:
            logger.error(f"HTTP —Å—Ç–∞—Ç—É—Å-–∫–æ–¥ {e.response.status_code}: {e}")
            return {"status": "error", "message": f"–°–µ—Ä–≤–µ—Ä –≤–µ—Ä–Ω—É–ª –æ—à–∏–±–∫—É: {e.response.status_code}."}
        except Exception as e:
            logger.error(f"–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞: {e}")
            return {"status": "error", "message": "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞."}

class ThrottlingMiddleware(BaseMiddleware):
    def __init__(self, rate_limit=1):
        super().__init__()
        self.rate_limit = rate_limit
        self.user_timestamps = {}

    async def on_pre_process_message(self, message: Message, data: dict):
        user_id = message.from_user.id
        current_time = time()

        if user_id not in self.user_timestamps:
            self.user_timestamps[user_id] = current_time
            return
        
        last_time = self.user_timestamps[user_id]
        if current_time - last_time < self.rate_limit:
            await message.answer("–°–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ –∑–∞–ø—Ä–æ—Å–æ–≤. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
            raise CancelHandler()

        self.user_timestamps[user_id] = current_time

test_questions = [
    {
        "question": "–ß—Ç–æ —Ç–∞–∫–æ–µ –º–∞—à–∏–Ω–Ω–æ–µ –æ–±—É—á–µ–Ω–∏–µ?",
        "answers": ["–ê–ª–≥–æ—Ä–∏—Ç–º", "–Ø–∑—ã–∫ –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏—è", "–§—Ä–µ–π–º–≤–æ—Ä–∫", "–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö"],
        "correct": 0
    },
    {
        "question": "–ö–∞–∫–∞—è –±–∏–±–ª–∏–æ—Ç–µ–∫–∞ —á–∞—â–µ –≤—Å–µ–≥–æ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –¥–ª—è –º–∞—à–∏–Ω–Ω–æ–≥–æ –æ–±—É—á–µ–Ω–∏—è –≤ Python?",
        "answers": ["Django", "NumPy", "TensorFlow", "Flask"],
        "correct": 2
    },
    {
        "question": "–ö–∞–∫–æ–π –º–µ—Ç–æ–¥ –æ–±—É—á–µ–Ω–∏—è –∏—Å–ø–æ–ª—å–∑—É–µ—Ç —Ä–∞–∑–º–µ—á–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ?",
        "answers": ["–ù–∞–¥–∑–æ—Ä–Ω–æ–µ –æ–±—É—á–µ–Ω–∏–µ", "–ë–µ–∑–Ω–∞–¥–∑–æ—Ä–Ω–æ–µ –æ–±—É—á–µ–Ω–∏–µ", "–†–µ–∏–Ω—Ñ–æ—Ä—Å–º–µ–Ω—Ç", "–≠–≤–æ–ª—é—Ü–∏–æ–Ω–Ω—ã–µ –∞–ª–≥–æ—Ä–∏—Ç–º—ã"],
        "correct": 0
    },
    # –î–æ–±–∞–≤—å –µ—â–µ 22 –≤–æ–ø—Ä–æ—Å–∞ –≤ —Ç–∞–∫–æ–º –∂–µ —Ñ–æ—Ä–º–∞—Ç–µ
]

async def generate_conversion_stats_by_source(stats):
    report = "üìä **–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –∏—Å—Ç–æ—á–Ω–∏–∫–∞–º**:\n\n"
    report += "| –ò—Å—Ç–æ—á–Ω–∏–∫ | –í—Å–µ–≥–æ | –ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–ª–∏—Å—å | % –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–π | –û–ø–ª–∞—Ç–∏–ª–∏ | % –û–ø–ª–∞—Ç –æ—Ç –≤—Å–µ—Ö | % –û–ø–ª–∞—Ç –æ—Ç –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö |\n"
    report += "|----------|-------|---------------------|----------------|----------|------------------|-----------------------------|\n"

    for stat in stats:
        report += f"| {stat['–ò—Å—Ç–æ—á–Ω–∏–∫']} | {stat['–í—Å–µ–≥–æ']} | {stat['–ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–ª–∏—Å—å']} | {stat['% –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–π']} | {stat['–û–ø–ª–∞—Ç–∏–ª–∏']} | {stat['% –û–ø–ª–∞—Ç –æ—Ç –≤—Å–µ—Ö']} | {stat['% –û–ø–ª–∞—Ç –æ—Ç –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö']} |\n"

    return report

async def generate_referral_conversion_stats(stats):
    report = "üìä **–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ —Ä–µ—Ñ–µ—Ä–∞–ª–∞–º**:\n\n"
    report += "| –†–µ—Ñ–µ—Ä–µ—Ä ID | –ü—Ä–∏—à–ª–æ –ø–æ —Ä–µ—Ñ–µ—Ä–∞–ª–∫–µ | –ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–ª–∏—Å—å | % –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–π | –û–ø–ª–∞—Ç–∏–ª–∏ | % –û–ø–ª–∞—Ç –æ—Ç –≤—Å–µ—Ö | % –û–ø–ª–∞—Ç –æ—Ç –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö |\n"
    report += "|------------|---------------------|---------------------|----------------|----------|------------------|-----------------------------|\n"

    for stat in stats:
        report += f"| {stat['–†–µ—Ñ–µ—Ä–µ—Ä ID']} | {stat['–ü—Ä–∏—à–ª–æ –ø–æ —Ä–µ—Ñ–µ—Ä–∞–ª–∫–µ']} | {stat['–ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–ª–∏—Å—å']} | {stat['% –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–π']} | {stat['–û–ø–ª–∞—Ç–∏–ª–∏']} | {stat['% –û–ø–ª–∞—Ç –æ—Ç –≤—Å–µ—Ö']} | {stat['% –û–ø–ª–∞—Ç –æ—Ç –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö']} |\n"

    return report