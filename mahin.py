import logging
import asyncio
import os
from aiogram import Bot, Dispatcher, types
from aiogram.utils import executor
from aiogram.types import ParseMode, InlineKeyboardMarkup, InlineKeyboardButton
from aiohttp import web
import nest_asyncio
from config import (
    API_TOKEN,
    COURSE_AMOUNT,
    REFERRAL_AMOUNT,
    SERVER_URL,
    GROUP_ID,
    TAX_INFO_IMG_URL,
    EARN_NEW_CLIENTS_VIDEO_URL,
    START_VIDEO_URL,
    REPORT_VIDEO_URL,
    REFERRAL_VIDEO_URL
)
import requests
bot = Bot(token=API_TOKEN)

dp = Dispatcher(bot)

# –£—Å—Ç–∞–Ω–æ–≤–∏–º –±–∞–∑–æ–≤—ã–π —É—Ä–æ–≤–µ–Ω—å –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.DEBUG)
logger = logging.getLogger(__name__)

# –ü—Ä–∏–º–µ–Ω—è–µ–º nest_asyncio –¥–ª—è –ø–æ–≤—Ç–æ—Ä–Ω–æ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —Ü–∏–∫–ª–∞ —Å–æ–±—ã—Ç–∏–π
nest_asyncio.apply()

# –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –≤–µ–±-—Å–µ—Ä–≤–µ—Ä–∞
def web_server():
    async def handle(request):
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–∏–ø–∞ –∑–∞–ø—Ä–æ—Å–∞
        response_data = {"message": "pong"}
        return web.json_response(response_data)
    
    async def notify_user(request):
        data = await request.json()
        tg_id = data.get("telegram_id")
        message_text = data.get("message")

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é —á–µ—Ä–µ–∑ Telegram
        if tg_id and message_text:
            await bot.send_message(chat_id=tg_id, text=message_text)
            return web.json_response({"status": "notification sent"}, status=200)
        return web.json_response({"error": "Invalid data"}, status=400)
    
    async def send_invite_link(request):
        data = await request.json()
        tg_id = data.get("telegram_id")
        # –ü–æ–ª—É—á–µ–Ω–∏–µ –ø—Ä–∏–≥–ª–∞—Å–∏—Ç–µ–ª—å–Ω–æ–π —Å—Å—ã–ª–∫–∏ –¥–ª—è –≥—Ä—É–ø–ø—ã
        invite_link = await bot.export_chat_invite_link(GROUP_ID)
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å—Å—ã–ª–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        await bot.send_message(
            chat_id=tg_id,
            text=f"–ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º! –í–∞—à –ø–ª–∞—Ç—ë–∂ –ø—Ä–æ—à—ë–ª —É—Å–ø–µ—à–Ω–æ, –≤—ã –æ–ø–ª–∞—Ç–∏–ª–∏ –∫—É—Ä—Å üéâ. –í–æ—Ç —Å—Å—ã–ª–∫–∞ –¥–ª—è –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è –∫ –Ω–∞—à–µ–π –≥—Ä—É–ø–ø–µ: {invite_link}",
            parse_mode=ParseMode.MARKDOWN
        )
        return web.json_response({"status": "notification sent"}, status=200)

    app = web.Application()
    app.router.add_route("HEAD", "/", handle)
    app.router.add_route("GET", "/", handle)
    app.router.add_post("/notify_user", notify_user)
    app.router.add_post("/send_invite_link", send_invite_link)
    return app

async def start_web_server():
    # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –≤–µ–±-—Å–µ—Ä–≤–µ—Ä–∞ —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º aiohttp
    app = web.AppRunner(web_server())
    await app.setup()

    # –ü—Ä–∏–≤—è–∑–∫–∞ –∞–¥—Ä–µ—Å–∞ –∏ –ø–æ—Ä—Ç–∞
    bind_address = "0.0.0.0"
    PORT = int(os.getenv("PORT", 8080))
    site = web.TCPSite(app, bind_address, PORT)
    await site.start()

    logging.info(f"–í–µ–±-—Å–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –Ω–∞ –ø–æ—Ä—Ç—É {PORT}")

    # –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ —Å –æ–∂–∏–¥–∞–Ω–∏–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è
    await executor.start_polling(dp, skip_updates=True)

async def start_polling():
    await dp.start_polling()

@dp.chat_member_handler()
async def check_user_in_db(event: ChatMemberUpdated):
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏–ª—Å—è –∫ –≥—Ä—É–ø–ø–µ
        if event.new_chat_member.status == 'member':  # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏–ª—Å—è
            telegram_id = event.new_chat_member.user.id
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
            check_user_url = SERVER_URL + "/check_user"
            user_data = {
                "telegram_id": telegram_id
            }
            try:
                response = requests.post(check_user_url, json=user_data).json()
                
                # –ï—Å–ª–∏ –æ—Ç–≤–µ—Ç –ø—É—Å—Ç–æ–π –∏–ª–∏ –Ω–µ—Ç —Ç–∞–∫–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –∫–∏–∫–∞–µ–º
                if response.get("user"):
                    user_id = response["user"]["id"]
                    logging.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å ID {user_id} –¥–æ–±–∞–≤–ª–µ–Ω –≤ –≥—Ä—É–ø–ø—É")
                else:
                    user_id = telegram_id
                    await bot.kick_chat_member(event.chat.id, user_id)  # –ö–∏–∫–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                    await bot.unban_chat_member(event.chat.id, user_id)  # –†–∞–∑–±–∞–Ω–∏–≤–∞–µ–º (—á—Ç–æ–±—ã –Ω–µ –æ—Å—Ç–∞—Ç—å—Å—è –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã–º)
                    logging.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å ID {user_id} –±—ã–ª –∏—Å–∫–ª—é—á—ë–Ω –∏–∑ –≥—Ä—É–ø–ø—ã, —Ç–∞–∫ –∫–∞–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö")
                    return
            except requests.RequestException as e:
                logger.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ –∫ —Å–µ—Ä–≤–µ—Ä—É: %s", e)
                await bot.send_message(event.chat.id, "–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
                return
            except KeyError:
                logger.warning("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö.")
                await bot.send_message(event.chat.id, "–°–Ω–∞—á–∞–ª–∞ –Ω–∞–∂–º–∏—Ç–µ /start –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏.")
                return
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Å–æ–±—ã—Ç–∏—è: {e}")

# –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é —Å –∫–Ω–æ–ø–∫–∞–º–∏
@dp.message_handler(commands=['start'])
async def send_welcome(message: types.Message):
    logging.debug(f"–ü–æ–ª—É—á–µ–Ω–∞ –∫–æ–º–∞–Ω–¥–∞ /start –æ—Ç {message.from_user.id}")

    # –ú—É—Å–æ—Ä
    await message.answer(f"hey")

    telegram_id = str(message.from_user.id)
    username = message.from_user.username or message.from_user.first_name

    referrer_id = message.text.split()[1] if len(message.text.split()) > 1 else ""

    register_or_greet_url = SERVER_URL + "/greet"

    user_data = {
        "telegram_id": telegram_id,
        "username": username,
        "referrer_id": referrer_id
    }

    # –ú—É—Å–æ—Ä
    await message.answer(f"{user_data} user_data")

    response = requests.post(register_or_greet_url, json=user_data).json()
    await message.answer(f"{response}")
    
    # –°–æ–∑–¥–∞–µ–º –æ—Å–Ω–æ–≤–Ω–æ–µ –º–µ–Ω—é —Å –∫–Ω–æ–ø–∫–∞–º–∏
    keyboard = InlineKeyboardMarkup(row_width=1)
    keyboard.add(
        InlineKeyboardButton("–û–ø–ª–∞—Ç–∏—Ç—å –∫—É—Ä—Å", callback_data='pay_course'),
    )

    # –ü—Ä–æ–≤–µ—Ä–∫–∞, –µ—Å—Ç—å –ª–∏ —Ö–æ—Ç—è –±—ã –æ–¥–∏–Ω —Ä–µ—Ñ–µ—Ä–∞–ª —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    telegram_id = str(message.from_user.id)
    check_referrals_url = SERVER_URL + "/check_referrals"
    user_data = {
        "telegram_id": telegram_id,
    }

    response = requests.post(check_referrals_url, json=user_data).json()
    keyboard.add(InlineKeyboardButton("–ó–∞—Ä–∞–±–æ—Ç–∞—Ç—å –Ω–∞ –Ω–æ–≤—ã—Ö –∫–ª–∏–µ–Ω—Ç–∞—Ö", callback_data='earn_new_clients'))
    # referral_exists = response["has_referrals"]
    # –í–∫–ª—é—á–∏—Ç—å –ø–æ–∑–∂–µ, –∞ —Å–≤–µ—Ä—Ö—É –≤—ã–∫–ª—é—á–∏—Ç—å
    # if referral_exists:
    #     # –ö–Ω–æ–ø–∫–∞ –¥–ª—è –∑–∞—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞ –∫–ª–∏–µ–Ω—Ç–∞—Ö, –µ—Å–ª–∏ –µ—Å—Ç—å —Ö–æ—Ç—è –±—ã –æ–¥–∏–Ω —Ä–µ—Ñ–µ—Ä–∞–ª
    #     keyboard.add(InlineKeyboardButton("–ó–∞—Ä–∞–±–æ—Ç–∞—Ç—å –Ω–∞ –Ω–æ–≤—ã—Ö –∫–ª–∏–µ–Ω—Ç–∞—Ö", callback_data='earn_new_clients'))
    # else:
    #     # –ö–Ω–æ–ø–∫–∞, –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –µ—â–µ –Ω–µ –æ–ø–ª–∞—Ç–∏–ª –∫—É—Ä—Å
    #     keyboard.add(InlineKeyboardButton("–ó–∞—Ä–∞–±–æ—Ç–∞—Ç—å –Ω–∞ –Ω–æ–≤—ã—Ö –∫–ª–∏–µ–Ω—Ç–∞—Ö (–Ω—É–∂–Ω–æ –æ–ø–ª–∞—Ç–∏—Ç—å –∫—É—Ä—Å)", callback_data='earn_new_clients_disabled'))
    # –í–∫–ª—é—á–∏—Ç—å –ø–æ–∑–∂–µ

    # –û—Ç–ø—Ä–∞–≤–∫–∞ –≤–∏–¥–µ–æ —Å –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ–º –∏ –º–µ–Ω—é
    await bot.send_video(
        chat_id=message.chat.id,
        video=START_VIDEO_URL,
        caption="–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –ó–¥–µ—Å—å –í—ã –º–æ–∂–µ—Ç–µ –æ–ø–ª–∞—Ç–∏—Ç—å –∫—É—Ä—Å –∏ –∑–∞—Ä–∞–±–æ—Ç–∞—Ç—å –Ω–∞ –ø—Ä–∏–≤–ª–µ—á–µ–Ω–∏–∏ –Ω–æ–≤—ã—Ö –∫–ª–∏–µ–Ω—Ç–æ–≤.",
        reply_markup=keyboard
    )

@dp.callback_query_handler(lambda c: c.data == 'pay_course')
async def process_pay_course(callback_query: types.CallbackQuery):
    await bot.answer_callback_query(callback_query.id)
    await handle_pay_command(callback_query.message, callback_query.from_user.id)

@dp.callback_query_handler(lambda c: c.data == 'earn_new_clients')
async def process_earn_new_clients(callback_query: types.CallbackQuery):
    await bot.answer_callback_query(callback_query.id)

    keyboard = InlineKeyboardMarkup(row_width=1)
    keyboard.add(
        InlineKeyboardButton("–ü–æ–ª—É—á–∏—Ç—å —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—É—é —Å—Å—ã–ª–∫—É", callback_data='get_referral'),
        InlineKeyboardButton("–ü—Ä–∏–≤—è–∑–∞—Ç—å/–∏–∑–º–µ–Ω–∏—Ç—å –∫–∞—Ä—Ç—É", callback_data='bind_card'),
        InlineKeyboardButton("–ü–æ–ª—É—á–∏—Ç—å –≤—ã–ø–ª–∞—Ç—É", callback_data='get_payout'),
        InlineKeyboardButton("–°—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞—Ç—å –æ—Ç—á—ë—Ç –æ –∑–∞—Ä–∞–±–æ—Ç–∫–µ", callback_data='generate_report'),
        InlineKeyboardButton("–ù–∞–ª–æ–≥–∏", callback_data='tax_info')
    )

    # –û—Ç–ø—Ä–∞–≤–∫–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
    await bot.send_video(
        chat_id=callback_query.message.chat.id,
        video=EARN_NEW_CLIENTS_VIDEO_URL,
        caption="–ö—É—Ä—Å —Å—Ç–æ–∏—Ç 6000 —Ä—É–±–ª–µ–π.\n–ó–∞ –∫–∞–∂–¥–æ–≥–æ –ø—Ä–∏–≤–ª–µ—á—ë–Ω–Ω–æ–≥–æ –≤–∞–º–∏ –∫–ª–∏–µ–Ω—Ç–∞ –≤—ã –∑–∞—Ä–∞–±–æ—Ç–∞–µ—Ç–µ 2000 —Ä—É–±–ª–µ–π.\n–ü–æ—Å–ª–µ 3-—Ö –∫–ª–∏–µ–Ω—Ç–æ–≤ –∫—É—Ä—Å —Å—Ç–∞–Ω–æ–≤–∏—Ç—Å—è –¥–ª—è –í–∞—Å –±–µ—Å–ø–ª–∞—Ç–Ω—ã–º.\n–ù–∞—á–∏–Ω–∞—è —Å 4-–≥–æ –∫–ª–∏–µ–Ω—Ç–∞, –≤—ã –Ω–∞—á–∏–Ω–∞–µ—Ç–µ –∑–∞—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å –Ω–∞ –ø—Ä–æ–¥–≤–∏–∂–µ–Ω–∏–∏ It-–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è."
    )
    await bot.send_message(
        callback_query.message.chat.id,
        "–û—Ç–ø—Ä–∞–≤–ª—è–π—Ç–µ —Ä–µ–∫–ª–∞–º–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ —Ç–µ–º–∞—Ç–∏—á–µ—Å–∫–∏–µ —á–∞—Ç—ã –ø–æ –∏–∑—É—á–µ–Ω–∏—é –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏—è, –∞ —Ç–∞–∫–∂–µ –≤ —Ç–µ–ª–µ–≥—Ä–∞–º-–≥—Ä—É–ø–ø—ã —Ä–∞–∑–ª–∏—á–Ω—ã—Ö —Ä–æ—Å—Å–∏–π—Å–∫–∏—Ö –≤—É–∑–æ–≤ –∏ –≤—ã –º–æ–∂–µ—Ç–µ –≤—ã–π—Ç–∏ –Ω–∞ –ø—Ä–∏–±—ã–ª—å –≤ 100.000 —Ä—É–±–ª–µ–π –ø–æ—Å–ª–µ –ø—Ä–∏–≤–ª–µ—á–µ–Ω–∏—è 50 –∫–ª–∏–µ–Ω—Ç–æ–≤.",
        reply_markup=keyboard
    )


# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ "–ü–æ–ª—É—á–∏—Ç—å —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—É—é —Å—Å—ã–ª–∫—É"
@dp.callback_query_handler(lambda c: c.data == 'get_referral')
async def process_get_referral(callback_query: types.CallbackQuery):
    await bot.answer_callback_query(callback_query.id)
    await send_referral_link(callback_query.message, callback_query.from_user.id)


# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ "–ü–æ–ª—É—á–∏—Ç—å —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—É—é —Å—Å—ã–ª–∫—É"
@dp.callback_query_handler(lambda c: c.data == 'bind_card')
async def process_get_referral(callback_query: types.CallbackQuery):
    await bot.answer_callback_query(callback_query.id)
    await bind_card(callback_query.message, callback_query.from_user.id)

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ "–ü–æ–ª—É—á–∏—Ç—å —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—É—é —Å—Å—ã–ª–∫—É"
@dp.callback_query_handler(lambda c: c.data == 'get_payout')
async def process_get_referral(callback_query: types.CallbackQuery):
    await bot.answer_callback_query(callback_query.id)
    await get_payout(callback_query.message, callback_query.from_user.id)


# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ "–°—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞—Ç—å –æ—Ç—á—ë—Ç –æ –∑–∞—Ä–∞–±–æ—Ç–∫–µ"
@dp.callback_query_handler(lambda c: c.data == 'generate_report')
async def process_generate_report(callback_query: types.CallbackQuery):
    await bot.answer_callback_query(callback_query.id)

    # –í—ã–±–æ—Ä —Ç–∏–ø–∞ –æ—Ç—á—ë—Ç–∞
    keyboard = InlineKeyboardMarkup(row_width=1)
    keyboard.add(
        InlineKeyboardButton("–û–±—â–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è", callback_data='report_overview'),
        InlineKeyboardButton("–°–ø–∏—Å–æ–∫ –ø—Ä–∏–≤–ª–µ—á—ë–Ω–Ω—ã—Ö –∫–ª–∏–µ–Ω—Ç–æ–≤", callback_data='report_clients')
    )

    await bot.send_message(
        chat_id=callback_query.message.chat.id,
        text="–ö–∞–∫–æ–π –æ—Ç—á—ë—Ç –≤—ã —Ö–æ—Ç–∏—Ç–µ —Å—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞—Ç—å?",
        reply_markup=keyboard
    )

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ "–û–±—â–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è"
@dp.callback_query_handler(lambda c: c.data == 'report_overview')
async def process_report_overview(callback_query: types.CallbackQuery):
    await bot.answer_callback_query(callback_query.id)
    await generate_overview_report(callback_query.message, callback_query.from_user.id)

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ "–°–ø–∏—Å–æ–∫ –ø—Ä–∏–≤–ª–µ—á—ë–Ω–Ω—ã—Ö –∫–ª–∏–µ–Ω—Ç–æ–≤"
@dp.callback_query_handler(lambda c: c.data == 'report_clients')
async def process_report_clients(callback_query: types.CallbackQuery):
    await bot.answer_callback_query(callback_query.id)
    await generate_clients_report(callback_query.message, callback_query.from_user.id)


# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ "–ù–∞–ª–æ–≥–∏"
@dp.callback_query_handler(lambda c: c.data == 'tax_info')
async def process_tax_info(callback_query: types.CallbackQuery):
    await bot.answer_callback_query(callback_query.id)
 
    # –û—Ç–ø—Ä–∞–≤–∫–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
    await bot.send_photo(
        chat_id=callback_query.message.chat.id,
        photo=TAX_INFO_IMG_URL,
        caption="–†–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã–µ –≤—ã–ø–ª–∞—Ç—ã –º–æ–≥—É—Ç –æ–±–ª–∞–≥–∞—Ç—å—Å—è –Ω–∞–ª–æ–≥–æ–º. –†–µ–∫–æ–º–µ–Ω–¥—É–µ–º –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è –∫–∞–∫ —Å–∞–º–æ–∑–∞–Ω—è—Ç—ã–π."
    )

    # –û—Ç–ø—Ä–∞–≤–∫–∞ HTML-—Å–æ–æ–±—â–µ–Ω–∏—è —Å –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–µ–π
    info_text = """
<b>–ö–∞–∫ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è –∏ –≤—ã–±—Ä–∞—Ç—å –≤–∏–¥ –¥–µ—è—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –¥–ª—è —É–ø–ª–∞—Ç—ã –Ω–∞–ª–æ–≥–æ–≤:</b>

1. –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–ø–æ—Å–æ–±–∞—Ö —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –∏ –Ω–µ —Ç–æ–ª—å–∫–æ –≤—ã –º–æ–∂–µ—Ç–µ –Ω–∞–π—Ç–∏ –Ω–∞ –æ—Ñ–∏—Ü–∏–∞–ª—å–Ω–æ–º —Å–∞–π—Ç–µ <a href="https://npd.nalog.ru/app/">npd.nalog.ru/app</a>.
   
2. –ü—Ä–∏ –≤—ã–±–æ—Ä–µ –≤–∏–¥–∞ –¥–µ—è—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ —Ä–µ–∫–æ–º–µ–Ω–¥—É–µ–º —É–∫–∞–∑–∞—Ç—å: ¬´–†–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã–µ –≤—ã–ø–ª–∞—Ç—ã¬ª –∏–ª–∏ ¬´–£—Å–ª—É–≥–∏¬ª.

<i>–ü–æ–∫–∞ –≤—ã –ø–ª–∞—Ç–∏—Ç–µ –Ω–∞–ª–æ–≥–∏, –≤—ã –∑–∞—â–∏—â–∞–µ—Ç–µ —Å–µ–±—è –∏ –¥–µ–ª–∞–µ—Ç–µ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã–µ –≤—ã–ø–ª–∞—Ç—ã –∑–∞–∫–æ–Ω–Ω—ã–º–∏.</i>
"""
    await callback_query.message.answer(info_text, parse_mode=ParseMode.HTML)

async def send_invite(message: types.Message):
    # –û—Ç–ø—Ä–∞–≤–∏—Ç—å –ø—Ä–∏–≥–ª–∞—Å–∏—Ç–µ–ª—å–Ω—É—é —Å—Å—ã–ª–∫—É
    invite_link = await bot.export_chat_invite_link(chat_id=message.chat.id)
    await message.reply(f"–ü—Ä–∏–≤–µ—Ç! –ü—Ä–æ–π–¥–∏ –ø–æ —ç—Ç–æ–π —Å—Å—ã–ª–∫–µ, —á—Ç–æ–±—ã –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç—å—Å—è –∫ –Ω–∞—à–µ–π –≥—Ä—É–ø–ø–µ: {invite_link}")

@dp.message_handler(commands=['pay'])
async def handle_pay_command(message: types.Message, telegram_id: str):
    amount = float(COURSE_AMOUNT)  # –ü—Ä–∏–º–µ—Ä —Å—É–º–º—ã, –º–æ–∂–Ω–æ –∑–∞–º–µ–Ω–∏—Ç—å
    
    # –ú—É—Å–æ—Ä
    await message.answer(f"{amount} amount")

    # –®–∞–≥ 1: –ü—Ä–æ–≤–µ—Ä–∫–∞, –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
    check_user_url = SERVER_URL + "/check_user"

    # –ú—É—Å–æ—Ä
    await message.answer(f"{check_user_url} check_user_url")

    user_data = {"telegram_id": telegram_id}
    # –ú—É—Å–æ—Ä
    await message.answer(f"{user_data} user_data")

    try:
        response = requests.post(check_user_url, json=user_data).json()
        await message.answer(f"{response} response")
        user_id = response["user"]["id"]
        # –ú—É—Å–æ—Ä
        await message.answer(f"{user_id} user_id")
    except requests.RequestException as e:
        logger.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: %s", e)
        await message.answer("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
        return
    except KeyError:
        logger.warning("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω, –∑–∞–ø—Ä–æ—Å /pay –æ—Ç–∫–ª–æ–Ω—ë–Ω.")
        await message.answer("–°–Ω–∞—á–∞–ª–∞ –Ω–∞–∂–º–∏—Ç–µ /start –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏.")
        return

    # –®–∞–≥ 2: –û—Ç–ø—Ä–∞–≤–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –Ω–∞ —Å–æ–∑–¥–∞–Ω–∏–µ –ø–ª–∞—Ç–µ–∂–∞
    create_payment_url = SERVER_URL + "/create_payment"
    # –ú—É—Å–æ—Ä
    await message.answer(f"{create_payment_url} create_payment_url")

    payment_data = {"telegram_id": telegram_id, "amount": amount}

    # –ú—É—Å–æ—Ä
    await message.answer(f"{payment_data} payment_data")
    try:
        response = requests.post(create_payment_url, json=payment_data).json()
        payment_url = response.get("confirmation", {}).get("confirmation_url")
        # –ú—É—Å–æ—Ä
        await message.answer(f"{payment_url} payment_url")

        if payment_url:
            await message.answer(f"–î–ª—è –æ–ø–ª–∞—Ç—ã –∫—É—Ä—Å–∞, –ø–µ—Ä–µ–π–¥–∏—Ç–µ –ø–æ —Å—Å—ã–ª–∫–µ: {payment_url}")
        else:
            logger.error("–û—à–∏–±–∫–∞: Confirmation URL –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –≤ –æ—Ç–≤–µ—Ç–µ —Å–µ—Ä–≤–µ—Ä–∞.")
            await message.answer("–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Å—Å—ã–ª–∫–∏ –¥–ª—è –æ–ø–ª–∞—Ç—ã.")
    except requests.RequestException as e:
        logger.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –∑–∞–ø—Ä–æ—Å–∞ –Ω–∞ —Å–µ—Ä–≤–µ—Ä: %s", e)
        await message.answer("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –ø–ª–∞—Ç–µ–∂–∞.")

@dp.message_handler(commands=['generate_overview_report'])
async def generate_overview_report(message: types.Message, telegram_id: str):
    # –ú—É—Å–æ—Ä
    await message.answer(f"generate_overview_report")
    report_url = SERVER_URL + "/generate_overview_report"
    user_data = {"telegram_id": telegram_id}

    # –ú—É—Å–æ—Ä
    await message.answer(f"{telegram_id} telegram_id")
    await message.answer(f"{report_url} report_url")
    await message.answer(f"{user_data} user_data")

    try:
        response = requests.post(report_url, json=user_data).json()

        # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç –æ—Ç—á–µ—Ç–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ –¥–∞–Ω–Ω—ã—Ö –∏–∑ –æ—Ç–≤–µ—Ç–∞
        username = response.get("username")
        referral_count = response.get("referral_count")
        total_payout = response.get("total_payout")
        current_balance = response.get("current_balance")
        paid_count = response.get("paid_count")
        paid_percentage = response.get("paid_percentage")

        # –ú—É—Å–æ—Ä
        await message.answer(f"{username} username")
        await message.answer(f"{referral_count} referral_count")
        await message.answer(f"{total_payout} total_payout")
        await message.answer(f"{current_balance} current_balance")

        # Generate the report
        report = (
            f"<b>–û—Ç—á—ë—Ç –¥–ª—è {username}:</b>\n\n"
            f"–ü—Ä–∏–≤–ª–µ—á—ë–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏: {referral_count}\n"
            f"–û–ø–ª–∞—Ç–∏–ª–∏ –∫—É—Ä—Å: {paid_count} ({paid_percentage:.2f}%)\n"
            f"–û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã—Ö –¥–µ–Ω–µ–≥: {total_payout:.2f} —Ä—É–±.\n"
            f"–¢–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å: {current_balance:.2f} —Ä—É–±.\n\n"
        )

        await bot.send_video(
            chat_id=message.chat.id,
            video=REPORT_VIDEO_URL,
            caption=report,
            parse_mode=ParseMode.HTML
        )

    except requests.RequestException as e:
        logger.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –∑–∞–ø—Ä–æ—Å–∞ –Ω–∞ —Å–µ—Ä–≤–µ—Ä: %s", e)
        await message.answer("–û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç—á–µ—Ç–∞.")
    except KeyError:
        await message.answer("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞–∂–º–∏—Ç–µ /start –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏.")

@dp.message_handler(commands=['generate_clients_report'])
async def generate_clients_report(message: types.Message, telegram_id: str):
    # –ú—É—Å–æ—Ä
    await message.answer(f"generate_clients_report")
    report_url = SERVER_URL + "/generate_clients_report"
    user_data = {"telegram_id": telegram_id}

    # –ú—É—Å–æ—Ä
    await message.answer(f"{telegram_id} telegram_id")
    await message.answer(f"{report_url} report_url")
    await message.answer(f"{user_data} user_data")

    try:
        response = requests.post(report_url, json=user_data).json()

        # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç –æ—Ç—á–µ—Ç–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ –¥–∞–Ω–Ω—ã—Ö –∏–∑ –æ—Ç–≤–µ—Ç–∞
        username = response.get("username")
        invited_list = response.get("invited_list")

        # –ú—É—Å–æ—Ä
        await message.answer(f"{username} username")


        # Generate the report
        report = (
            f"<b>–û—Ç—á—ë—Ç –¥–ª—è {username}:</b>\n"
        )

        await bot.send_video(
            chat_id=message.chat.id,
            video=REPORT_VIDEO_URL,
            caption=report,
            parse_mode=ParseMode.HTML
        )

        # Send the list of invited users
        if invited_list:
            await message.answer(f"{invited_list} invited_list –µ—Å—Ç—å")
            for invited in invited_list:
                await message.answer(f"{invited} invited –ø–µ—Ä–µ–±–æ—Ä –Ω–∞—á–∞–ª—Å—è")
                user_status = "–û–ø–ª–∞—Ç–∏–ª" if invited["paid"] else "–ù–µ –æ–ø–ª–∞—Ç–∏–ª"
                user_info = (
                    f"<b>–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å:</b> {invited['username']}\n"
                    f"<b>Telegram ID:</b> {invited['telegram_id']}\n"
                    f"<b>–°—Ç–∞—Ç—É—Å:</b> {user_status}\n\n"
                )
                await message.answer(f"{user_info} user_info")
                await bot.send_message(
                    chat_id=message.chat.id,
                    text=user_info,
                    parse_mode=ParseMode.HTML
                )

    except requests.RequestException as e:
        logger.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –∑–∞–ø—Ä–æ—Å–∞ –Ω–∞ —Å–µ—Ä–≤–µ—Ä: %s", e)
        await message.answer("–û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç—á–µ—Ç–∞.")
    except KeyError:
        await message.answer("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞–∂–º–∏—Ç–µ /start –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏.")


@dp.message_handler(commands=['referral'])
async def bind_card(message: types.Message, telegram_id: str):
    bind_card_url = SERVER_URL + "/bind_card"
    user_data = {"telegram_id": telegram_id}
    try:
        response = requests.post(bind_card_url, json=user_data).json()
        if response.get("status") == "error":
            await message.answer(response.get("message"))
            return
        binding_url = response.get("binding_url")

        # –ú—É—Å–æ—Ä
        await message.answer(f"{binding_url} binding_url")
    
        if binding_url:
            await message.answer(f"–ü–µ—Ä–µ–π–¥–∏—Ç–µ –ø–æ —Å–ª–µ–¥—É—é—â–µ–π —Å—Å—ã–ª–∫–µ –¥–ª—è –ø—Ä–∏–≤—è–∑–∫–∏ –∫–∞—Ä—Ç—ã: {binding_url}")
        else:
            await message.answer("–û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Å—Å—ã–ª–∫–∏.")
    except requests.RequestException as e:
        logger.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –∑–∞–ø—Ä–æ—Å–∞ –Ω–∞ —Å–µ—Ä–≤–µ—Ä: %s", e)
        await message.answer("–û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Å—Å—ã–ª–∫–∏.")
    except KeyError:
        await message.answer("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞–∂–º–∏—Ç–µ /start –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏.")


@dp.message_handler(commands=['referral'])
async def send_referral_link(message: types.Message, telegram_id: str):
    # –ú—É—Å–æ—Ä
    await message.answer(f"send_referral_link")
    referral_url = SERVER_URL + "/get_referral_link"
    user_data = {"telegram_id": telegram_id}

    # –ú—É—Å–æ—Ä
    await message.answer(f"{telegram_id} telegram_id")
    await message.answer(f"{referral_url} referral_url")
    await message.answer(f"{user_data} user_data")

    try:
        response = requests.post(referral_url, json=user_data).json()

    
        if response["status"] == "success":
            referral_link = response.get("referral_link")
            # –ú—É—Å–æ—Ä
            await message.answer(f"{referral_link} referral_link")

            await bot.send_video(
                chat_id=message.chat.id,
                video=REFERRAL_VIDEO_URL,
                caption=(
                    f"–û—Ç–ø—Ä–∞–≤–ª—è—é —Ç–µ–±–µ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—É—é —Å—Å—ã–ª–∫—É:\n{referral_link}\n"
                    f"–ó–∞—Ä–∞–±–∞—Ç—ã–≤–∞–π, –ø—Ä–æ–¥–≤–∏–≥–∞—è It - –æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ."
                )
            )
        elif response["status"] == "error":
            await message.answer(response["message"])
        else:
            await message.answer("–û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Å—Å—ã–ª–∫–∏")
    except requests.RequestException as e:
        logger.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –∑–∞–ø—Ä–æ—Å–∞ –Ω–∞ —Å–µ—Ä–≤–µ—Ä: %s", e)
        await message.answer("–û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–π —Å—Å—ã–ª–∫–∏.")
    except KeyError:
        await message.answer("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞–∂–º–∏—Ç–µ /start –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏.")

# –†–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã–µ –≤—ã–ø–ª–∞—Ç—ã
@dp.message_handler(commands=['get_payout'])
async def get_payout(message: types.Message, telegram_id: str):

    await message.answer(f"telegram_id {telegram_id}")

    user_data = {
        "telegram_id": telegram_id
    }

    # –ó–∞–ø—Ä–æ—Å –±–∞–ª–∞–Ω—Å–∞ –∏ –æ–ø–ª–∞—Ç—ã –∫—É—Ä—Å–∞ —Å —Å–µ—Ä–≤–µ—Ä–∞
    response = requests.post(f"{SERVER_URL}/isAbleToGetPayout", json=user_data)
    response.raise_for_status()
    data = response.json()
    balance = data.get("balance", 0)
    paid = data.get("paid", False)
    isBinded = data.get("isBinded", False)

    await message.answer(f"balance {balance}")
    await message.answer(f"paid {paid}")
    await message.answer(f"isBinded {isBinded}")

    if not(paid):
        await bot.send_message(
            message.chat.id, 
            "–í—ã –Ω–µ –º–æ–∂–µ—Ç–µ —Å—Ç–∞—Ç—å –ø–∞—Ä—Ç–Ω—ë—Ä–æ–º –ø–æ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–π –ø—Ä–æ–≥—Ä–∞–º–º–µ, –Ω–µ –æ–ø–ª–∞—Ç–∏–≤ –∫—É—Ä—Å"
        )
        return

    if not(isBinded):
        await bot.send_message(
            message.chat.id, 
            "–ß—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –≤—ã–ø–ª–∞—Ç—É, –ø—Ä–∏–≤—è–∂–∏—Ç–µ –±–∞–Ω–∫–æ–≤—Å–∫—É—é –∫–∞—Ä—Ç—É"
        )
        return

    if balance <= 0:
        await bot.send_message(
            message.chat.id, 
            "–í–∞—à –±–∞–ª–∞–Ω—Å —Ä–∞–≤–µ–Ω 0. –í—ã –Ω–µ –º–æ–∂–µ—Ç–µ –∑–∞–ø—Ä–æ—Å–∏—Ç—å –≤—ã–ø–ª–∞—Ç—É."
        )
        return

    # –ü—Ä–æ—Å–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤–≤–µ—Å—Ç–∏ —Å—É–º–º—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ: "–í—ã–ø–ª–∞—Ç–∞: 5000"
    await bot.send_message(
        message.chat.id,
        f"–í–∞—à —Ç–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å: {balance:.2f} RUB.\n"
        "–í–≤–µ–¥–∏—Ç–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –≤—ã–ø–ª–∞—Ç—ã –≤ —Ñ–æ—Ä–º–∞—Ç–µ:\n–í—ã–ø–ª–∞—Ç–∞: 5000"
    )

@dp.message_handler(lambda message: message.text.lower().startswith('–≤—ã–ø–ª–∞—Ç–∞: '))
async def process_payout_amount(message: types.Message):
    # –ü–æ–ª—É—á–∞–µ–º —Å—É–º–º—É –∏–∑ —Ç–µ–∫—Å—Ç–∞
    try:
        # –ò–∑–≤–ª–µ–∫–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ—Å–ª–µ "–í—ã–ø–ª–∞—Ç–∞: "
        text = message.text[len('–í—ã–ø–ª–∞—Ç–∞: '):].strip()
        if not(text.isdigit()):
            await message.answer("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –≤–µ–ª–∏—á–∏–Ω—ã –≤—ã–ø–ª–∞—Ç—ã")
            return

        # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º —Å—É–º–º—É –≤ —á–∏—Å–ª–æ
        amount = float(text)

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –≤–∞–ª–∏–¥–Ω–æ—Å—Ç—å —Å—É–º–º—ã
        if amount <= 0:
            await message.answer("–°—É–º–º–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –±–æ–ª—å—à–µ 0. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑.")
            return
        
        telegram_id = message.from_user.id
        await message.answer(f"telegram_id {telegram_id}")

        user_data = {
            "telegram_id": telegram_id
        }

        # –ó–∞–ø—Ä–æ—Å –±–∞–ª–∞–Ω—Å–∞ —Å —Å–µ—Ä–≤–µ—Ä–∞
        response = requests.post(f"{SERVER_URL}/isAbleToGetPayout", json=user_data)
        response.raise_for_status()
        data = response.json()
        await message.answer(f"data {data}")

        balance = data.get("balance", 0)
        paid = data.get("paid", False)
        await message.answer(f"balance {balance}")

        if not(paid):
            await bot.send_message(
                message.chat.id, 
                "–í—ã –Ω–µ –º–æ–∂–µ—Ç–µ —Å—Ç–∞—Ç—å –ø–∞—Ä—Ç–Ω—ë—Ä–æ–º –ø–æ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–π –ø—Ä–æ–≥—Ä–∞–º–º–µ, –Ω–µ –æ–ø–ª–∞—Ç–∏–≤ –∫—É—Ä—Å"
            )
            return

        if amount > balance or amount <= 0 or balance <= 0:
            await message.answer(
                f"–£ –≤–∞—Å –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤. –í–∞—à –±–∞–ª–∞–Ω—Å: {balance:.2f} RUB. "
                "–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É, –∫–æ—Ç–æ—Ä–∞—è –º–µ–Ω—å—à–µ –∏–ª–∏ —Ä–∞–≤–Ω–∞ –≤–∞—à–µ–º—É –±–∞–ª–∞–Ω—Å—É. –°—É–º–º–∞ –Ω–µ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω–æ–π"
            )
            return

        # –î–µ–ª–∞–µ–º –∑–∞–ø—Ä–æ—Å –∫ FastAPI —ç–Ω–¥–ø–æ–∏–Ω—Ç—É –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –≤—ã–ø–ª–∞—Ç—ã
        response = requests.post(
            f"{SERVER_URL}/add_payout_toDb",
            json={"telegram_id": telegram_id, "amount": amount}
        )
        response.raise_for_status()
        payout_data = response.json()
        await message.answer(f"payout_data {payout_data}")

        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–≤–µ—Ç–∞ –æ—Ç FastAPI
        if payout_data["status"] == "ready_to_pay":
            await message.answer(
                f"–í–∞—à –∑–∞–ø—Ä–æ—Å –Ω–∞ –≤—ã–ø–ª–∞—Ç—É {amount:.2f} RUB –ø—Ä–∏–Ω—è—Ç. –í—ã–ø–ª–∞—Ç–∞ –±—É–¥–µ—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–∞ –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è."
            )
            payout_response = requests.post(
                f"{SERVER_URL}/make_payout",
                json={"telegram_id": telegram_id}
            )
            payout_response.raise_for_status()
            payout_result = payout_response.json()

            # –º—É—Å–æ—Ä
            await message.answer(f"payout_result {payout_result}")

            if payout_result["status"] == "success":
                await message.answer(payout_result["message"])
            else:
                await message.answer(
                    f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–ª–∞—Ç–µ: {payout_result.get('message', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞')}"
                )
        else:
            await message.answer(payout_data["reason"])

    except ValueError:
        await message.answer("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞–Ω–Ω—ã—Ö.")

@dp.message_handler(commands=["start"])
async def send_offer_link(message: types.Message):
    await message.answer("–°–∫–∞—á–∞–π—Ç–µ –æ—Ñ–µ—Ä—Ç—É –ø–æ —Å—Å—ã–ª–∫–µ: https://yourdomain.com/offer")

USE_RENDER = os.getenv("USE_RENDER", "false").lower() == "true"

if __name__ == "__main__":
    if USE_RENDER:
        # Render: –∑–∞–ø—É—Å–∫–∞–µ–º –≤–µ–±-—Å–µ—Ä–≤–µ—Ä
        asyncio.run(start_web_server())
    else:
        # –õ–æ–∫–∞–ª—å–Ω–æ: –∑–∞–ø—É—Å–∫–∞–µ–º polling
        asyncio.run(start_polling())