import os
from aiohttp import web
from loader import *
from utils import *
from config import (
    GROUP_ID,
    SERVER_URL
)

def web_server():
    async def handle(request):
        response_data = {"message": "pong"}
        return web.json_response(response_data)
    
    async def notify_user(request):
        log.info(f"notify_user handler started")
        data = await request.json()
        log.info(f"data {data}")
        tg_id = data.get("telegram_id")
        log.info(f"tg_id {tg_id}")
        message_text = data.get("message")
        log.info(f"message_text {message_text}")

        if tg_id and message_text:
            log.info(f"check tg_id and message_text passed")
            keyboard = InlineKeyboardMarkup(row_width=1)
            keyboard.add(
                InlineKeyboardButton("–†–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è –ø—Ä–æ–≥—Ä–∞–º–º–∞", callback_data='earn_new_clients'),
            )

            log.info(f"before sending message")
            await bot.send_message(
                chat_id=tg_id,
                text=message_text,
                reply_markup=keyboard
            )
            return web.json_response({"status": "notification sent"}, status=200)
        return web.json_response({"error": "Invalid data"}, status=400)
    
    async def send_invite_link(request):
        try:
            data = await request.json()
            tg_id = data.get("telegram_id")
            payment_id = data.get("payment_id")
            log.info("–ù–∞—á–∞–ª–æ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞–ø—Ä–æ—Å–∞...")
            
            invite_link: ChatInviteLink = await bot.create_chat_invite_link(
                chat_id=GROUP_ID,
                member_limit=1,
                expire_date=None
            )
            link = invite_link.invite_link
            log.info("–ü—Ä–∏–≥–ª–∞—Å–∏—Ç–µ–ª—å–Ω–∞—è —Å—Å—ã–ª–∫–∞ —Å–æ–∑–¥–∞–Ω–∞: %s", link)

            # save_invite_link_url = SERVER_URL + "/save_invite_link"
            # user_data = {
            #     "telegram_id": tg_id,
            #     "invite_link": link
            # }
            # response = await send_request(
            #     save_invite_link_url,
            #     method="POST",
            #     json=user_data
            # )
            
            # if response["status"] == "success":
            keyboard = InlineKeyboardMarkup(row_width=1)
            keyboard.add(
                InlineKeyboardButton("–†–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è –ø—Ä–æ–≥—Ä–∞–º–º–∞", callback_data='earn_new_clients'),
            )

            text_info = f"–ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º! –í—Å—ë –ø—Ä–æ—à–ª–æ —É—Å–ø–µ—à–Ω–æ üéâ. –í–æ—Ç —Å—Å—ã–ª–∫–∞ –¥–ª—è –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è –∫ –Ω–∞—à–µ–π –≥—Ä—É–ø–ø–µ. –û–±—Ä–∞—â–∞–π—Ç–µ—Å—å —Å –Ω–µ–π –æ—á–µ–Ω—å –∞–∫–∫—É—Ä–∞—Ç–Ω–æ. –û–Ω–∞ –æ–¥–Ω–æ—Ä–∞–∑–æ–≤–∞—è –∏ –µ—Å–ª–∏ –≤—ã –≤–æ—Å–ø–æ–ª—å–∑—É–µ—Ç–µ—Å—å –µ–¥–∏–Ω—Å—Ç–≤–µ–Ω–Ω—ã–º —à–∞–Ω—Å–æ–º –Ω–µ–≤–µ—Ä–Ω–æ, –∏—Å–ø—Ä–∞–≤–∏—Ç—å –Ω–∏—á–µ–≥–æ –Ω–µ –ø–æ–ª—É—á–∏—Ç—Å—è: {link}."
            if payment_id:
                text_info += "\n–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤–∞—à –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –ø–ª–∞—Ç–µ–∂–∞: {payment_id}."    
            
            await bot.send_message(
                chat_id=tg_id,
                text=text_info,
                reply_markup=keyboard
            )
            return web.json_response({"status": "notification sent"}, status=200)
        except Exception as e:
            log.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Å—Å—ã–ª–∫–∏: %s", e)
            raise web.HTTPInternalServerError(text="–û—à–∏–±–∫–∞ –Ω–∞ —Å—Ç–æ—Ä–æ–Ω–µ Telegram API")

    app = web.Application()
    app.router.add_route("HEAD", "/", handle)
    app.router.add_route("GET", "/", handle)
    app.router.add_post("/notify_user", notify_user)
    app.router.add_post("/send_invite_link", send_invite_link)
    return app

async def start_web_server():
    # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –≤–µ–±-—Å–µ—Ä–≤–µ—Ä–∞ —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º aiohttp
    app = web.AppRunner(web_server())
    await app.setup()

    # –ü—Ä–∏–≤—è–∑–∫–∞ –∞–¥—Ä–µ—Å–∞ –∏ –ø–æ—Ä—Ç–∞
    bind_address = "0.0.0.0"
    PORT = int(os.getenv("PORT", 8080))
    site = web.TCPSite(app, bind_address, PORT)
    await site.start()

    log.info(f"–í–µ–±-—Å–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –Ω–∞ –ø–æ—Ä—Ç—É {PORT}")

    # –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ —Å –æ–∂–∏–¥–∞–Ω–∏–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è
    await executor.start_polling(dp, skip_updates=True)