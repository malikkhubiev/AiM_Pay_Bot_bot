from utils import log
import os
import io
from config import (
    COURSE_AMOUNT,
    REFERRAL_AMOUNT,
    SERVER_URL,
    START_VIDEO_URL,
    REPORT_VIDEO_URL,
    REFERRAL_VIDEO_URL,
    EARN_NEW_CLIENTS_VIDEO_URL,
    TAX_INFO_IMG_URL,
    MAIN_TELEGRAM_ID,
    GROUP_ID,
)
import aiohttp
import asyncio
from analytics import send_event_to_ga4
from utils import *
from loader import *

# –ö—ç—à –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —Å—Å—ã–ª–æ–∫
links_cache = {}

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ —Å–ª–æ–≤–∞—Ä—è –∫—ç—à–∞, –µ—Å–ª–∏ –µ–≥–æ –µ—â—ë –Ω–µ—Ç
def init_user_cache(telegram_id: str):
    if telegram_id not in links_cache:
        links_cache[telegram_id] = {
            'invite_link': None,
            'referral_link': None
        }

@dp.message_handler(commands=['start'])
async def start(message: types.Message, telegram_id: str = None, username: str = None):
    log.info(f"–ü–æ–ª—É—á–µ–Ω–∞ –∫–æ–º–∞–Ω–¥–∞ /start –æ—Ç {telegram_id}")
    
    if not(telegram_id):
        telegram_id = message.from_user.id
    if not(username):
        username = message.from_user.username or message.from_user.first_name
    
    await bot.send_message(
        chat_id=str(MAIN_TELEGRAM_ID),
        text=f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å telegram_id={telegram_id} username={username} –Ω–∞–∂–∞–ª –∫–Ω–æ–ø–∫—É /start"
    )

    referrer_id = message.text.split(' ')[1] if len(message.text.split(' ')) > 1 else None

    if referrer_id and not(referrer_id.isdigit()):
        referrer_id = None

    log.info(f"referrer_id {referrer_id}")

    start_url = SERVER_URL + "/start"
    user_data = {
        "telegram_id": telegram_id,
        "username": username,
        "referrer_id": referrer_id
    }
    log.info(f"user_data  {user_data}")
    keyboard = InlineKeyboardMarkup(row_width=1)

    response = await send_request(
        start_url,
        method="POST",
        json=user_data
    )
    log.info(f"response {response}")

    if response["status"] == "success":
        if response["type"] == "temp_user":
            log.info(f"temp")
            keyboard.add(
                InlineKeyboardButton("–ù–∞—á–∞–ª–æ —Ä–∞–±–æ—Ç—ã üèîÔ∏è", callback_data='getting_started'),
                InlineKeyboardButton("–î–æ–∫—É–º–µ–Ω—Ç—ã üìö", callback_data='documents'),
            )
            log.info(f"send_message")
            await bot.send_message(
                chat_id=message.chat.id,
                text="–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –î–ª—è –Ω–∞—á–∞–ª–∞ —Ä–∞–±–æ—Ç—ã —Å –±–æ—Ç–æ–º –≤–∞–º –Ω—É–∂–Ω–æ —Å–æ–≥–ª–∞—Å–∏—Ç—å—Å—è —Å –ø–æ–ª–∏—Ç–∏–∫–æ–π –∫–æ–Ω—Ñ–∏–¥–µ–Ω—Ü–∏–∞–ª—å–Ω–æ—Å—Ç–∏ –∏ –ø—É–±–ª–∏—á–Ω–æ–π –æ—Ñ–µ—Ä—Ç–æ–π. –ù–∞–∂–∏–º–∞—è –∫–Ω–æ–ø–∫—É ¬´–ù–∞—á–∞–ª–æ —Ä–∞–±–æ—Ç—ã¬ª, –≤—ã –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ—Ç–µ —Å–≤–æ—ë —Å–æ–≥–ª–∞—Å–∏–µ.",
                reply_markup=keyboard
            )
        elif response["type"] == "user":
            if response["to_show"] == "pay_course":
                keyboard.add(
                    # InlineKeyboardButton("–û–ø–ª–∞—Ç–∏—Ç—å –∫—É—Ä—Å üí∞", callback_data='pay_course'),
                    InlineKeyboardButton("–û–ø–ª–∞—Ç–∏—Ç—å –∫—É—Ä—Å üí∞", callback_data='fake_buy_course'),
                )
            
            if response["to_show"] == "trial":
                keyboard.add(
                    InlineKeyboardButton("–ü—Ä–æ–±–Ω—ã–π –ø–µ—Ä–∏–æ–¥ 24 —á–∞—Å–∞ üåå", callback_data='get_trial')
                )

            # –ü—Ä–æ–º–æ–∫–æ–¥–µ—Ä—ã —É–ø—Ä–∞–∑–¥–Ω–µ–Ω—ã
            # if response["with_promo"] == True:
            #     keyboard.add(
            #         InlineKeyboardButton("–í–≤–µ—Å—Ç–∏ –ø—Ä–æ–º–æ–∫–æ–¥ üé©", callback_data='type_promo'),
            #     )
            

            # –°—Å—ã–ª–∫–∞ —É–ø—Ä–∞–∑–¥–Ω–µ–Ω–∞
            # else:
            #     keyboard.add(
            #         InlineKeyboardButton("–ü–æ–ª—É—á–∏—Ç—å —Å—Å—ã–ª–∫—É", callback_data='get_invite_link'),
            #     )
            
            # –° —Ä–µ—Ñ–µ—Ä–∞–ª–æ–º
            # info_text = response["response_message"] + "\n\nüíé–ú—ã –æ—á–µ–Ω—å —Ä–∞–¥—ã —Ç–µ–±—è –≤–∏–¥–µ—Ç—å!üíé\n\n–û–ü–õ–ê–¢–ò –ö–£–†–°, –ø–æ–ª—É—á–∏ –ó–ù–ê–ù–ò–Ø –∏ –ó–ê–†–ê–ë–û–¢–ê–ô, —Å–æ–≤–µ—Ç—É—è –¥—Ä—É–∑—å—è–º –ö–ê–ß–ï–°–¢–í–ï–ù–ù–´–ô –ü–†–û–î–£–ö–¢."
            
            # –ë–µ–∑
            info_text = response["response_message"] + "\n\nüíé–ú—ã –æ—á–µ–Ω—å —Ä–∞–¥—ã —Ç–µ–±—è –≤–∏–¥–µ—Ç—å!üíé\n\n–û–ü–õ–ê–¢–ò –ö–£–†–°, –ø–æ–ª—É—á–∏ –ó–ù–ê–ù–ò–Ø, –ø–æ—Å—Ç—Ä–æ–π —Å–≤–æ–∏ —Å—Ç–∞—Ä—Ç–∞–ø—ã –∏ –¥–æ–±–∞–≤–ª—è–π –ø—Ä–æ–µ–∫—Ç—ã –≤ –ø–æ—Ä—Ç—Ñ–æ–ª–∏–æ.\n\n–°–æ–º–Ω–µ–≤–∞–µ—à—å—Å—è, —á—Ç–æ –∫—É—Ä—Å —Ç–µ–±–µ –ø–æ–¥—Ö–æ–¥–∏—Ç? –ù–∞–∂–º–∏ –Ω–∞ –∫–Ω–æ–ø–∫—É –∏ –ø–æ–ª—É—á–∏ –±–µ—Å–ø–ª–∞—Ç–Ω—ã–π –ø—Ä–æ–±–Ω—ã–π –ø–µ—Ä–∏–æ–¥ –¥–ª—è –æ–∑–Ω–∞–∫–æ–º–ª–µ–Ω–∏—è –°–û –í–°–ï–ú–ò –º–∞—Ç–µ—Ä–∏–∞–ª–∞–º–∏ –∫—É—Ä—Å–∞."
            
            keyboard.add(
                InlineKeyboardButton("–ü–æ–ª—É—á–∏—Ç—å —Å–µ—Ä—Ç—Ñ–∏–∫–∞—Ç üéì", callback_data='get_certificate'),
                InlineKeyboardButton("–ü–æ–¥—Ä–æ–±–Ω–µ–µ –æ –∫—É—Ä—Å–µ üî¨", callback_data='more_about_course'),
                # InlineKeyboardButton("–ó–∞—Ä–∞–±–æ—Ç–∞—Ç—å –Ω–∞ –Ω–æ–≤—ã—Ö –∫–ª–∏–µ–Ω—Ç–∞—Ö üí∏", callback_data='earn_new_clients')
            )
            await bot.send_video(
                chat_id=message.chat.id,
                video=START_VIDEO_URL,
                caption=info_text,
                reply_markup=keyboard
            )
    elif response["status"] == "error":
        await message.answer(response["message"])

async def getting_started(message: types.Message, telegram_id: str, u_name: str = None):
    log.info(f"–ü–æ–ª—É—á–µ–Ω–∞ –∫–æ–º–∞–Ω–¥–∞ /getting_started –æ—Ç {telegram_id}")

    await bot.send_message(
        chat_id=str(MAIN_TELEGRAM_ID),
        text=f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å telegram_id={telegram_id} username={u_name} –Ω–∞–∂–∞–ª –∫–Ω–æ–ø–∫—É /getting started"
    )

    getting_started_url = SERVER_URL + "/getting_started"
    user_data = {
        "telegram_id": telegram_id
    }
    log.info(f"user_data {user_data}")

    response = await send_request(
        getting_started_url,
        method="POST",
        json=user_data
    )
    log.info(f"response {response}")

    if response["status"] == "success":
        keyboard = InlineKeyboardMarkup(row_width=1)

        # –ü—Ä–æ–º–æ–∫–æ–¥–µ—Ä—ã —É–ø—Ä–∞–∑–¥–Ω–µ–Ω—ã
        # if response["with_promo"] == True:
        #     keyboard.add(
        #         InlineKeyboardButton("–í–≤–µ—Å—Ç–∏ –ø—Ä–æ–º–æ–∫–æ–¥ üé©", callback_data='type_promo'),
        #     )

        keyboard.add(
            # InlineKeyboardButton("–û–ø–ª–∞—Ç–∏—Ç—å –∫—É—Ä—Å üí∞", callback_data='pay_course'),
            InlineKeyboardButton("–û–ø–ª–∞—Ç–∏—Ç—å –∫—É—Ä—Å üí∞", callback_data='fake_buy_course'),
            InlineKeyboardButton("–ü—Ä–æ–±–Ω—ã–π –ø–µ—Ä–∏–æ–¥ 24 —á–∞—Å–∞ üåå", callback_data='get_trial'),
            InlineKeyboardButton("–ü–æ–ª—É—á–∏—Ç—å —Å–µ—Ä—Ç—Ñ–∏–∫–∞—Ç üéì", callback_data='get_certificate'),
            InlineKeyboardButton("–ü–æ–¥—Ä–æ–±–Ω–µ–µ –æ –∫—É—Ä—Å–µ üî¨", callback_data='more_about_course'),
            # InlineKeyboardButton("–ó–∞—Ä–∞–±–æ—Ç–∞—Ç—å, —Å–æ–≤–µ—Ç—É—è –¥—Ä—É–∑—å—è–º üí∏", callback_data='earn_new_clients')
        )
        await bot.send_video(
            chat_id=message.chat.id,
            video=START_VIDEO_URL,
            caption="üíé–ú—ã –æ—á–µ–Ω—å —Ä–∞–¥—ã —Ç–µ–±—è –≤–∏–¥–µ—Ç—å!üíé\n\n–û–ü–õ–ê–¢–ò –ö–£–†–°, –ø–æ–ª—É—á–∏ –ó–ù–ê–ù–ò–Ø, –ø–æ—Å—Ç—Ä–æ–π —Å–≤–æ–∏ —Å—Ç–∞—Ä—Ç–∞–ø—ã –∏ –¥–æ–±–∞–≤–ª—è–π –ø—Ä–æ–µ–∫—Ç—ã –≤ –ø–æ—Ä—Ç—Ñ–æ–ª–∏–æ.\n\n–°–æ–º–Ω–µ–≤–∞–µ—à—å—Å—è, —á—Ç–æ –∫—É—Ä—Å —Ç–µ–±–µ –ø–æ–¥—Ö–æ–¥–∏—Ç? –ù–∞–∂–º–∏ –Ω–∞ –∫–Ω–æ–ø–∫—É –∏ –ø–æ–ª—É—á–∏ –±–µ—Å–ø–ª–∞—Ç–Ω—ã–π –ø—Ä–æ–±–Ω—ã–π –ø–µ—Ä–∏–æ–¥ –¥–ª—è –æ–∑–Ω–∞–∫–æ–º–ª–µ–Ω–∏—è –°–û –í–°–ï–ú–ò –º–∞—Ç–µ—Ä–∏–∞–ª–∞–º–∏ –∫—É—Ä—Å–∞.",
            reply_markup=keyboard
        )
    elif response["status"] == "error":
        await message.answer(response["message"])

async def get_documents(message: types.Message, telegram_id: str, u_name: str = None):
    log.info(f"–ü–æ–ª—É—á–µ–Ω–∞ –∫–æ–º–∞–Ω–¥–∞ /get_documents –æ—Ç {telegram_id}")
    keyboard = InlineKeyboardMarkup(row_width=1)
    keyboard.add(
        InlineKeyboardButton("–ü—É–±–ª–∏—á–Ω–∞—è –æ—Ñ–µ—Ä—Ç–∞ üìó", callback_data='public_offer'),
        InlineKeyboardButton("–ü–æ–ª–∏—Ç–∏–∫–∞ –ö–æ–Ω—Ñ–∏–¥–µ–Ω—Ü–∏–∞–ª—å–Ω–æ—Å—Ç–∏ üìô", callback_data='privacy_policy'),
        InlineKeyboardButton("–ù–∞–∑–∞–¥", callback_data='start'),
    )
    await bot.send_message(
        chat_id=message.chat.id,
        text="–í–Ω–∏–º–∞—Ç–µ–ª—å–Ω–æ –ø—Ä–æ—á–∏—Ç–∞–π—Ç–µ —Å–ª–µ–¥—É—é—â–∏–µ –¥–æ–∫—É–º–µ–Ω—Ç—ã.",
        reply_markup=keyboard
    )

async def more_about_course(message: types.Message, telegram_id: str, u_name: str = None):
    log.info(f"–ü–æ–ª—É—á–µ–Ω–∞ –∫–æ–º–∞–Ω–¥–∞ /more_about_course –æ—Ç {telegram_id}")

    await bot.send_message(
        chat_id=str(MAIN_TELEGRAM_ID),
        text=f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å telegram_id={telegram_id} username={u_name} –Ω–∞–∂–∞–ª –∫–Ω–æ–ø–∫—É /more_about_course"
    )

    keyboard = InlineKeyboardMarkup(row_width=1)
    keyboard.add(
        InlineKeyboardButton("–°—Ç—Ä—É–∫—Ç—É—Ä–∞ –∫—É—Ä—Å–∞", callback_data='course_structure'),
        InlineKeyboardButton("–ù–∞–∑–∞–¥", callback_data='start'),
    )

    message1 = """
    üíé <b>–ú–≥–Ω–æ–≤–µ–Ω–Ω–æ–µ –ø–æ–≥—Ä—É–∂–µ–Ω–∏–µ –≤ –º–∞—à–∏–Ω–Ω–æ–µ –æ–±—É—á–µ–Ω–∏–µ –∏ –ø–æ—Å—Ç—Ä–æ–µ–Ω–∏–µ –Ω–µ–π—Ä–æ—Å–µ—Ç–µ–π</b> üíé
    –¢—ã –Ω–∞—á–∏–Ω–∞–µ—à—å —Ä–∞–∑–±–∏—Ä–∞—Ç—å—Å—è <b>–≤ –º–∏—Ä–µ –∞–Ω–∞–ª–∏—Ç–∏–∫–∏ –¥–∞–Ω–Ω—ã—Ö</b>? –≠—Ç–æ—Ç –∫—É—Ä—Å —Å–æ–∑–¥–∞–Ω –¥–ª—è <b>–Ω–æ–≤–∏—á–∫–æ–≤</b>, –∫–æ—Ç–æ—Ä—ã–µ —Ö–æ—Ç—è—Ç –±—ã—Å—Ç—Ä–æ –æ—Å–≤–æ–∏—Ç—å Python –∏ –±–∏–±–ª–∏–æ—Ç–µ–∫–∏ —Ä–∞–±–æ—Ç—ã —Å –¥–∞–Ω–Ω—ã–º–∏, <b>–º–∞—à–∏–Ω–Ω—ã–º –æ–±—É—á–µ–Ω–∏–µ–º –∏ –ø–æ—Å—Ç—Ä–æ–µ–Ω–∏–µ–º –Ω–µ–π—Ä–æ—Å–µ—Ç–µ–π</b>.

    üß† <b>–ß—Ç–æ —Ç—ã –ø–æ–ª—É—á–∏—à—å?</b>
    –ú—ã –¥–∞—ë–º <b>—Ç–æ–Ω–Ω—É –ø—Ä–∞–∫—Ç–∏–∫–∏ –∏ –ø—Ä–æ—Å—Ç—ã—Ö –∞–Ω–∞–ª–æ–≥–∏–π</b>, —á—Ç–æ–±—ã —Ç—ã –ø–æ–Ω—è–ª —Ç–µ–æ—Ä–∏—é –Ω–∞ –ª–µ—Ç—É, –Ω–∞—á–∞–ª –ø–∏—Å–∞—Ç—å –∫–æ–¥, –ø–æ—Å—Ç–æ—è–Ω–Ω–æ –∑–∞–∫—Ä–µ–ø–ª—è—è –ø—Ä–æ–π–¥–µ–Ω–Ω—ã–π –º–∞—Ç–µ—Ä–∏–∞–ª. –¢–µ–º—ã –æ–±—ä—è—Å–Ω—è—é—Ç—Å—è —á–µ—Ä–µ–∑ <b>–ø—Ä–∏–º–µ—Ä—ã –∏–∑ –∂–∏–∑–Ω–∏</b>, —Å–ª–æ–∂–Ω—ã–µ –∫–æ–Ω—Ü–µ–ø—Ü–∏–∏ –æ–±—ä—è—Å–Ω—è—é—Ç—Å—è <b>–ø—Ä–æ—Å—Ç—ã–º —è–∑—ã–∫–æ–º</b>.

üîÆ <b>–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ —Ç—ã –ø–æ–ª—É—á–∏—à—å:</b>
    <b>–ö—Ä–∞—Å–∏–≤—ã–µ –≥—Ä–∞—Ñ–∏—á–µ—Å–∫–∏–µ –º–∞—Ç–µ—Ä–∏–∞–ª—ã</b> –≤ –≤–∏–¥–µ —Ä–æ–∞–¥–º—ç–ø–æ–≤ ‚Äî —Ä–∞–∑–Ω–æ—Ü–≤–µ—Ç–Ω—ã–µ —Å—Ö–µ–º—ã –∏ –ø–æ—à–∞–≥–æ–≤—ã–µ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏, –∫–æ—Ç–æ—Ä—ã–µ –ø–æ–º–æ–≥—É—Ç —Ç–µ–±–µ <b>–æ—Ä–∏–µ–Ω—Ç–∏—Ä–æ–≤–∞—Ç—å—Å—è –≤ —Ä–∞–∑–ª–∏—á–Ω—ã—Ö —ç—Ç–∞–ø–∞—Ö</b> –ø–æ—Å—Ç—Ä–æ–µ–Ω–∏—è –º–æ–¥–µ–ª–µ–π –º–∞—à–∏–Ω–Ω–æ–≥–æ –æ–±—É—á–µ–Ω–∏—è. –≠—Ç–∏ –º–∞—Ç–µ—Ä–∏–∞–ª—ã –±—É–¥—É—Ç —Ç–≤–æ–∏–º–∏ <b>–≤–∏–∑—É–∞–ª—å–Ω—ã–º–∏ —à–ø–∞—Ä–≥–∞–ª–∫–∞–º–∏</b>. 
    
    üí∏ <b>–†–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è –ø—Ä–æ–≥—Ä–∞–º–º–∞ ‚Äî –∑–∞—Ä–∞–±–æ—Ç–∞–π, —Å–æ–≤–µ—Ç—É—è –¥—Ä—É–∑—å—è–º!:</b>
    –ü—Ä–∏–≥–ª–∞—Å–∏ –¥—Ä—É–∑–µ–π –Ω–∞ –∫—É—Ä—Å. –ü—Ä–∏–≤–µ–¥–∏ <b>3 –¥—Ä—É–∑–µ–π</b> ‚Äî <b>–∑–∞ –∫–∞–∂–¥–æ–≥–æ —Ç—ã –ø–æ–ª—É—á–∏—à—å –ø–æ 2000 —Ä—É–±–ª–µ–π</b>. –≠—Ç–æ —Ç–≤–æ–π —à–∞–Ω—Å –ø–æ–ª–Ω–æ—Å—Ç—å—é –æ–∫—É–ø–∏—Ç—å –∫—É—Ä—Å –∏ –Ω–∞—á–∞—Ç—å <b>–∑–∞—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å –Ω–∞ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è—Ö</b>!

üî• <b>–ù–∞—á–Ω–∏ –ø—Ä—è–º–æ —Å–µ–π—á–∞—Å:</b>
    –ß–µ–º <b>—Ä–∞–Ω—å—à–µ –Ω–∞—á–Ω—ë—à—å</b>, —Ç–µ–º —Ä–∞–Ω—å—à–µ –æ–∫–∞–∂–µ—à—å—Å—è –≤ –º–∏—Ä–µ –Ω–æ–≤—ã—Ö —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–∏ –∏ –æ—Ç–∫—Ä—ã–≤–∞—é—â–∏—Ö—Å—è –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–µ–π. <b>–ù–µ –æ—Ç–∫–ª–∞–¥—ã–≤–∞–π:</b> —ç—Ç–æ—Ç –∫—É—Ä—Å ‚Äî —Ç–≤–æ–π –±—ã—Å—Ç—Ä—ã–π —Å—Ç–∞—Ä—Ç –≤ –º–∏—Ä–µ –∞–Ω–∞–ª–∏—Ç–∏–∫–∏ –¥–∞–Ω–Ω—ã—Ö, –º–∞—à–∏–Ω–Ω–æ–≥–æ –æ–±—É—á–µ–Ω–∏—è –∏ –Ω–µ–π—Ä–æ—Å–µ—Ç–µ–π.

    üéÇ <b>–ú–∞–∫—Å–∏–º—É–º –ø–æ–ª—å–∑—ã:</b>
    –ü–æ—Å–ª–µ –ø—Ä–æ—Ö–æ–∂–¥–µ–Ω–∏—è –∫—É—Ä—Å–∞ —Ç—ã –º–æ–∂–µ—à—å –ø—Ä–æ–¥–æ–ª–∂–∞—Ç—å —Ä–∞–∑–≤–∏–≤–∞—Ç—å—Å—è. –ú—ã –¥–∞—ë–º —Å—Å—ã–ª–∫–∏ –Ω–∞ <b>–±–µ—Å–ø–ª–∞—Ç–Ω—ã–µ –∫—É—Ä—Å—ã</b> –∏ <b>–¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –º–∞—Ç–µ—Ä–∏–∞–ª—ã</b>, —á—Ç–æ–±—ã —Ç—ã –∏–∑–≤–ª—ë–∫ <b>–º–∞–∫—Å–∏–º–∞–ª—å–Ω—É—é –ø–æ–ª—å–∑—É</b> –∏ —Ä–∞–∑–≤–∏–≤–∞–ª—Å—è –±–µ–∑ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π)
    
–ü–æ—Å–º–æ—Ç—Ä–∏ –∫—Ä–∞—Ç–∫–∏–π <a href="https://drive.google.com/file/d/1esKuOAHOBAXiLXYiZFyoPoFlSHCRIQdT/view?usp=sharing">–û–±–∑–æ—Ä –∫—É—Ä—Å–∞</a>, –∞ –µ—Å–ª–∏ —Ö–æ—á–µ—à—å –ø–æ–¥—Ä–æ–±–Ω–µ–µ, –Ω–∞–∂–º–∏ –Ω–∞ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ
    """

    await bot.send_message(
        chat_id=message.chat.id,
        text=message1,
        parse_mode=ParseMode.HTML,
        reply_markup=keyboard,
    )

async def course_structure(message: types.Message, telegram_id: str, u_name: str = None):
    log.info(f"–ü–æ–ª—É—á–µ–Ω–∞ –∫–æ–º–∞–Ω–¥–∞ /course_structure –æ—Ç {telegram_id}")

    await bot.send_message(
        chat_id=str(MAIN_TELEGRAM_ID),
        text=f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å telegram_id={telegram_id} username={u_name} –Ω–∞–∂–∞–ª –∫–Ω–æ–ø–∫—É /course_structure"
    )

    keyboard = InlineKeyboardMarkup(row_width=1)
    keyboard.add(
        InlineKeyboardButton("–ù–∞–∑–∞–¥", callback_data='start'),
    )

    message1 = """
    <b>1. Python ‚Äî —Ç–≤–æ–π –Ω–æ–≤—ã–π –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –¥–∞–Ω–Ω—ã–º–∏</b>
    - –ú—ã –Ω–∞—á–Ω–µ–º —Å <a href="https://drive.google.com/file/d/1AhFOQzWrh_MtWn37zBQaavtafDrTPRY1/view?usp=sharing">–æ—Å–Ω–æ–≤ Python</a>: –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ, —Ü–∏–∫–ª—ã, —Ñ—É–Ω–∫—Ü–∏–∏ ‚Äî –≤—Å—ë, —á—Ç–æ –Ω—É–∂–Ω–æ –¥–ª—è –¥–∞–ª—å–Ω–µ–π—à–µ–π —Ä–∞–±–æ—Ç—ã —Å –±–∏–±–ª–∏–æ—Ç–µ–∫–∞–º–∏. –¢—ã —É–≤–∏–¥–∏—à—å, —á—Ç–æ —è–∑—ã–∫ –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏—è ‚Äî —ç—Ç–æ –Ω–µ —Å–ª–æ–∂–Ω—ã–µ –∑–∞–∫–æ—Ä—é—á–∫–∏, –∞ <b>–ª–æ–≥–∏—á–µ—Å–∫–∏–π –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç</b>, –∫–æ—Ç–æ—Ä—ã–º —Ç—ã –±—É–¥–µ—à—å —É–ø—Ä–∞–≤–ª—è—Ç—å –ª–µ–≥–∫–æ –∏ —É–≤–µ—Ä–µ–Ω–Ω–æ.

    <b>2. –†–∞–±–æ—Ç–∞ —Å –¥–∞–Ω–Ω—ã–º–∏ –∏ —á–∏—Å–ª–∞–º–∏</b>
    - <a href="https://drive.google.com/file/d/1BOzNNFSB1AluKH65gdpbetMSVVYiMZ8Y/view?usp=sharing">numpy</a> ‚Äî —ç—Ç–æ –±–∏–±–ª–∏–æ—Ç–µ–∫–∞, –∫–æ—Ç–æ—Ä–∞—è —É—Å–∫–æ—Ä—è–µ—Ç –æ–±—Ä–∞–±–æ—Ç–∫—É —á–∏—Å–µ–ª. –ü—Ä–µ–¥—Å—Ç–∞–≤—å, —á—Ç–æ —É —Ç–µ–±—è –≤ —Ä—É–∫–∞—Ö —Å—É–ø–µ—Ä–º–æ—â–Ω—ã–π –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä, –∫–æ—Ç–æ—Ä—ã–π –º–≥–Ω–æ–≤–µ–Ω–Ω–æ —Å–ø—Ä–∞–≤–ª—è–µ—Ç—Å—è —Å –±–æ–ª—å—à–∏–º–∏ –æ–±—ä–µ–º–∞–º–∏ –¥–∞–Ω–Ω—ã—Ö.
    - <a href="https://drive.google.com/file/d/1XHsVm35lQrkCt1R__0HQe0-TyDjw8g2y/view?usp=sharing">pandas</a> ‚Äî –±–∏–±–ª–∏–æ—Ç–µ–∫–∞ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å —Ç–∞–±–ª–∏—Ü–∞–º–∏. –≠—Ç–æ —Ç–≤–æ–π –Ω–æ–≤—ã–π –ø–æ–º–æ—â–Ω–∏–∫ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∏ –∞–Ω–∞–ª–∏–∑–∞ –¥–∞–Ω–Ω—ã—Ö: —Ç—ã —Å–º–æ–∂–µ—à—å —Ñ–∏–ª—å—Ç—Ä–æ–≤–∞—Ç—å, —Å–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å –∏ –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤—ã–≤–∞—Ç—å –¥–∞–Ω–Ω—ã–µ –±—É–∫–≤–∞–ª—å–Ω–æ –≤ –Ω–µ—Å–∫–æ–ª—å–∫–æ —Å—Ç—Ä–æ–∫ –∫–æ–¥–∞.
    
    <b>3. –í–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö</b>
    - <a href="https://drive.google.com/file/d/1_N56NcItsRq8v5kZ7rkiQKxCVuuSBI_C/view?usp=sharing">matplotlib</a> –∏ <a href="https://drive.google.com/file/d/19xlbqr4TGdQXW91Pb8FOH8va35cn2wfA/view?usp=sharing">seaborn</a> –ø–æ–º–æ–≥—É—Ç —Ç–µ–±–µ —Å–æ–∑–¥–∞–≤–∞—Ç—å –∫—Ä–∞—Å–∏–≤—ã–µ –∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ç–∏–≤–Ω—ã–µ –≥—Ä–∞—Ñ–∏–∫–∏. –≠—Ç–∏ –±–∏–±–ª–∏–æ—Ç–µ–∫–∏ –æ—Ç–∫—Ä–æ—é—Ç –¥–ª—è —Ç–µ–±—è –º–∏—Ä –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–∏, –≥–¥–µ —Ç—ã —Å–º–æ–∂–µ—à—å –Ω–∞–≥–ª—è–¥–Ω–æ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª—è—Ç—å —Å–≤–æ–∏ –¥–∞–Ω–Ω—ã–µ –∏ –Ω–∞—Ö–æ–¥–∏—Ç—å —Å–∫—Ä—ã—Ç—ã–µ –∑–∞–∫–æ–Ω–æ–º–µ—Ä–Ω–æ—Å—Ç–∏.
    - <a href="https://drive.google.com/file/d/1mF0XfrdPPQ5EUAg_CvHVbfhHuobCpeVS/view?usp=sharing">plotly</a> ‚Äî –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è <b>–∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã—Ö –≥—Ä–∞—Ñ–∏–∫–æ–≤</b>, –∫–æ—Ç–æ—Ä—ã–µ –º–æ–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –¥–ª—è –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏—Ö –ø—Ä–µ–∑–µ–Ω—Ç–∞—Ü–∏–π –∏–ª–∏ –∞–Ω–∞–ª–∏–∑–∞ –¥–∞–Ω–Ω—ã—Ö –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏. –¢—ã —Å–º–æ–∂–µ—à—å –≤–∏–∑—É–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å —Å–ª–æ–∂–Ω—ã–µ –ø—Ä–æ—Ü–µ—Å—Å—ã –∏ –ø—Ä–µ–≤—Ä–∞—â–∞—Ç—å –∏—Ö –≤ –ø–æ–Ω—è—Ç–Ω—ã–µ –∏ –Ω–∞–≥–ª—è–¥–Ω—ã–µ –æ—Ç—á—ë—Ç—ã.

    <b>4. –ú–∞—à–∏–Ω–Ω–æ–µ –æ–±—É—á–µ–Ω–∏–µ: –ø—Ä–æ–≥–Ω–æ–∑–∏—Ä—É–π –±—É–¥—É—â–µ–µ</b>
    - <a href="https://drive.google.com/file/d/1gvdoXCaDHvqQgsrpYHfdCb8SIX042EGi/view?usp=sharing">scikit-learn</a> ‚Äî —Ç–≤–æ–π –ø–µ—Ä–≤—ã–π —à–∞–≥ –≤ –º–∏—Ä –ø—Ä–æ–≥–Ω–æ–∑–∏—Ä–æ–≤–∞–Ω–∏—è. –≠—Ç–∞ –±–∏–±–ª–∏–æ—Ç–µ–∫–∞ –ø–æ–º–æ–∂–µ—Ç —Ç–µ–±–µ —Å—Ç—Ä–æ–∏—Ç—å –º–æ–¥–µ–ª–∏ –º–∞—à–∏–Ω–Ω–æ–≥–æ –æ–±—É—á–µ–Ω–∏—è –¥–ª—è –ø—Ä–æ–≥–Ω–æ–∑–∏—Ä–æ–≤–∞–Ω–∏—è —Ü–µ–Ω, –∞–Ω–∞–ª–∏–∑–∞ –º–∞—Ä–∫–µ—Ç–∏–Ω–≥–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö, —Ñ–∏–Ω–∞–Ω—Å–æ–≤—ã—Ö –ø–æ–∫–∞–∑–∞—Ç–µ–ª–µ–π –∏ –¥–∞–∂–µ –º–µ–¥–∏—Ü–∏–Ω—Å–∫–∏—Ö –ø—Ä–æ–≥–Ω–æ–∑–æ–≤. –ú—ã –Ω–∞—É—á–∏–º —Ç–µ–±—è –Ω–µ —Ç–æ–ª—å–∫–æ —Å—Ç—Ä–æ–∏—Ç—å –º–æ–¥–µ–ª–∏, –Ω–æ –∏ –æ–±—ä—è—Å–Ω–∏–º –∫–∞–∂–¥—ã–π —à–∞–≥ –ø—Ä–æ—Ü–µ—Å—Å–∞ ‚Äî –æ—Ç –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∏ –¥–∞–Ω–Ω—ã—Ö –¥–æ –∞–Ω–∞–ª–∏–∑–∞ –æ—à–∏–±–æ–∫. –í—Å–µ–≥–æ –º—ã —Ä–∞–∑–±–µ—Ä—ë–º 15 —à–∞–≥–æ–≤ –ø–æ—Å—Ç—Ä–æ–µ–Ω–∏—è –º–æ–¥–µ–ª–∏. 
    """

    message2 = """
    <b>5. –ù–µ–π—Ä–æ—Å–µ—Ç–∏: –≥–ª—É–±–æ–∫–æ–µ –æ–±—É—á–µ–Ω–∏–µ —Å Keras</b>
    - <a href="https://drive.google.com/file/d/1TGS4iKxVjmlESsVZs_DoAYKKo7-yD3Re/view?usp=sharing">keras</a> ‚Äî –±–∏–±–ª–∏–æ—Ç–µ–∫–∞ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –Ω–µ–π—Ä–æ—Å–µ—Ç—è–º–∏ –∏ –≤—Ç–æ—Ä–æ–π –ø–æ –≤–∞–∂–Ω–æ—Å—Ç–∏ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç. –î–∞–∂–µ –µ—Å–ª–∏ —Ç—ã —Å–æ–≤—Å–µ–º –Ω–µ –∑–Ω–∞–∫–æ–º —Å –Ω–µ–π—Ä–æ—Å–µ—Ç—è–º–∏, –º—ã –Ω–∞—á–Ω–µ–º —Å —Å–∞–º—ã—Ö –ø—Ä–æ—Å—Ç—ã—Ö –ø—Ä–∏–º–µ—Ä–æ–≤ –∏ –ø–æ—Å—Ç–µ–ø–µ–Ω–Ω–æ –ø–æ–≥—Ä—É–∑–∏–º —Ç–µ–±—è –≤ –±–æ–ª–µ–µ —Å–ª–æ–∂–Ω—ã–µ –º–Ω–æ–≥–æ—Å–ª–æ–π–Ω—ã–µ –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä—ã. –¢—ã –Ω–∞—É—á–∏—à—å—Å—è —Å—Ç—Ä–æ–∏—Ç—å —Å–µ—Ç–∏ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –∫–∞–∫ —á–∏—Å–ª–æ–≤—ã—Ö —Ç–∞–∫ –∏ –≥—Ä–∞—Ñ–∏—á–µ—Å–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö.

    <b>6. –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤ (NLP)</b>
    - <a href="https://drive.google.com/file/d/1fvRdWG-XNJB8h6ItdxmH2_6STcF8x7we/view?usp=sharing">spacy</a> –∏ <a href="https://drive.google.com/file/d/1fvRdWG-XNJB8h6ItdxmH2_6STcF8x7we/view?usp=sharing">transformers</a> ‚Äî –±–∏–±–ª–∏–æ—Ç–µ–∫–∏ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å —Ç–µ–∫—Å—Ç–∞–º–∏. –ò–∑—É—á–∏–º —Ç–æ–ª—å–∫–æ –æ—Å–Ω–æ–≤—ã: –ø–æ–∫–∞–∂–µ–º –∫–∞–∫ –∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å —Ç–µ–∫—Å—Ç, –∏–∑–≤–ª–µ–∫–∞—Ç—å –∫–ª—é—á–µ–≤—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é, –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç—å —Å–∏–Ω—Ç–∞–∫—Å–∏—á–µ—Å–∫–∏–π –∞–Ω–∞–ª–∏–∑. 

    <b>7. –ö–æ–º–ø—å—é—Ç–µ—Ä–Ω–æ–µ –∑—Ä–µ–Ω–∏–µ</b>
    - <a href="https://drive.google.com/file/d/1p2Fy8S8QO12ZEUhYPdDQrb-EzpgZMMh_/view?usp=sharing">OpenCV</a> ‚Äî –æ—Å–Ω–æ–≤–∞ –∫–æ–º–ø—å—é—Ç–µ—Ä–Ω–æ–≥–æ –∑—Ä–µ–Ω–∏—è. –û—á–µ–Ω—å –ø–æ–≤–µ—Ä—Ö–Ω–æ—Å—Ç–Ω–æ –ø—Ä–æ–π–¥—ë–º—Å—è –ø–æ —á–∞—Å—Ç–∏ –µ—ë —Ñ—É–Ω–∫—Ü–∏–π, —Å–≤—è–∑–∞–Ω–Ω—ã—Ö —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –∏–º–µ—é—â–∏—Ö—Å—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π. 
    
    <b>8. SQL: —Ä–∞–±–æ—Ç–∞ —Å –±–∞–∑–∞–º–∏ –¥–∞–Ω–Ω—ã—Ö</b>
    - <a href="https://drive.google.com/file/d/13hQAQ3mQ138u28WvIMzHMzDoMqRjFeOc/view?usp=sharing">SQL</a> ‚Äî —Ç—Ä–µ—Ç–∏–π –ø–æ –≤–∞–∂–Ω–æ—Å—Ç–∏ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç, –ø—Ä–µ–¥–Ω–∞–∑–Ω–∞—á–µ–Ω–Ω—ã–π –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –±–∞–∑–∞–º–∏ –¥–∞–Ω–Ω—ã—Ö. –ú—ã –Ω–∞—É—á–∏–º —Ç–µ–±—è —Å—Ç—Ä–æ–∏—Ç—å –∑–∞–ø—Ä–æ—Å—ã, –∏–∑–≤–ª–µ–∫–∞—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –∏ –∫–æ–º–±–∏–Ω–∏—Ä–æ–≤–∞—Ç—å –¥–∞–Ω–Ω—ã–µ –¥–ª—è –∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞. –ú—ã –∏—Å–ø–æ–ª—å–∑—É–µ–º —ç—Ç–æ—Ç –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç –¥–ª—è <b>–∏–∑–≤–ª–µ—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö</b> –∏–∑ —Å–≤—è–∑–∞–Ω–Ω—ã—Ö –∏ –Ω–µ—Å–≤—è–∑–∞–Ω–Ω—ã—Ö —Ç–∞–±–ª–∏—Ü –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö, –∫–æ—Ç–æ—Ä—ã–π —Ç—ã —Å–º–æ–∂–µ—à—å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –∫–∞–∫ –≤ –∞–Ω–∞–ª–∏—Ç–∏–∫–µ, —Ç–∞–∫ –∏ –≤ –º–∞—à–∏–Ω–Ω–æ–º –æ–±—É—á–µ–Ω–∏–∏.
    
<b>–•–æ—á–µ—à—å –ø–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å - –ü—Ä–∏—Å–æ–µ–¥–∏–Ω—è–π—Å—è</b>! 
    """

    await bot.send_message(text=message1, parse_mode='HTML', chat_id=message.chat.id)
    await bot.send_message(
        chat_id=message.chat.id,
        text=message2,
        parse_mode=ParseMode.HTML,
        reply_markup=keyboard
    )

async def get_public_offer(message: types.Message, telegram_id: str, u_name: str = None):
    log.info(f"–ü–æ–ª—É—á–µ–Ω–∞ –∫–æ–º–∞–Ω–¥–∞ /get_public_offer –æ—Ç {telegram_id}")
    public_offer_url = "https://docs.google.com/document/d/1N6ZZoRyW1uIBNVATMaFC_lxQDIpUi1vwNpS8YWvGr-U/edit?usp=sharing"
    keyboard = InlineKeyboardMarkup(row_width=1)
    keyboard.add(
        InlineKeyboardButton("–ù–∞–∑–∞–¥", callback_data='documents')
    )
    await bot.send_message(
        chat_id=message.chat.id,
        text=f"–î–ª—è –æ–∑–Ω–∞–∫–æ–º–ª–µ–Ω–∏—è —Å –ü—É–±–ª–∏—á–Ω–æ–π –æ—Ñ–µ—Ä—Ç–æ–π –ø–µ—Ä–µ–π–¥–∏—Ç–µ –ø–æ —Å—Å—ã–ª–∫–µ: {public_offer_url}",
        reply_markup=keyboard
    )

async def get_privacy_policy(message: types.Message, telegram_id: str, u_name: str = None):
    log.info(f"–ü–æ–ª—É—á–µ–Ω–∞ –∫–æ–º–∞–Ω–¥–∞ /get_privacy_policy –æ—Ç {telegram_id}")
    privacy_url = "https://docs.google.com/document/d/1CWVSyjuYJXPIpMApAdMevFVnFuIxHbF7xE-Ngqmd-B0/edit?usp=sharing"
    keyboard = InlineKeyboardMarkup(row_width=1)
    keyboard.add(
        InlineKeyboardButton("–ù–∞–∑–∞–¥", callback_data='documents')
    )
    await bot.send_message(
        chat_id=message.chat.id,
        text=f"–î–ª—è –æ–∑–Ω–∞–∫–æ–º–ª–µ–Ω–∏—è —Å –ü–æ–ª–∏—Ç–∏–∫–æ–π –∫–æ–Ω—Ñ–∏–¥–µ–Ω—Ü–∏–∞–ª—å–Ω–æ—Å—Ç–∏ –ø–µ—Ä–µ–π–¥–∏—Ç–µ –ø–æ —Å—Å—ã–ª–∫–µ: {privacy_url}",
        reply_markup=keyboard
    )

async def handle_pay_command(message: types.Message, telegram_id: str, u_name: str = None):
    amount = float(COURSE_AMOUNT)  # –ü—Ä–∏–º–µ—Ä —Å—É–º–º—ã, –º–æ–∂–Ω–æ –∑–∞–º–µ–Ω–∏—Ç—å
    
    log.info(f"amount {amount}")
    await message.answer(f"–ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏...")
    # –®–∞–≥ 1: –ü—Ä–æ–≤–µ—Ä–∫–∞, –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
    check_user_url = SERVER_URL + "/check_user"

    log.info(f"check_user_url {check_user_url}")

    user_data = {"telegram_id": telegram_id}
    log.info(f"user_data {user_data}")

    response = await send_request(
        check_user_url,
        method="POST",
        json=user_data
    )

    if response["status"] == "success":
        log.info(f"response {response}")
        await message.answer(f"–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–æ–π–¥–µ–Ω–∞! –ü–æ—Å—Ç—Ä–æ–µ–Ω–∏–µ —Å—Å—ã–ª–∫–∏ –¥–ª—è –æ–ø–ª–∞—Ç—ã...")
        user_id = response["user"]["id"]
        
        log.info(f"user_id {user_id}")

        # –®–∞–≥ 2: –û—Ç–ø—Ä–∞–≤–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –Ω–∞ —Å–æ–∑–¥–∞–Ω–∏–µ –ø–ª–∞—Ç–µ–∂–∞
        create_payment_url = SERVER_URL + "/create_payment"
        log.info(f"create_payment_url {create_payment_url}")

        payment_data = {
            "telegram_id": telegram_id
        }

        log.info(f"payment_data {payment_data}")
        response = await send_request(
            create_payment_url,
            method="POST",
            json=user_data
        )

        if response["status"] == "success":
            payment_url = response.get("confirmation", {}).get("confirmation_url")
            
            log.info(f"payment_url {payment_url}")

            if payment_url:
                await message.answer(f"–î–ª—è –æ–ø–ª–∞—Ç—ã –∫—É—Ä—Å–∞, –ø–µ—Ä–µ–π–¥–∏—Ç–µ –ø–æ —Å—Å—ã–ª–∫–µ: {payment_url}")
            else:
                logger.error("–û—à–∏–±–∫–∞: Confirmation URL –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –≤ –æ—Ç–≤–µ—Ç–µ —Å–µ—Ä–≤–µ—Ä–∞.")
                await message.answer("–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Å—Å—ã–ª–∫–∏ –¥–ª—è –æ–ø–ª–∞—Ç—ã.")
        elif response["status"] == "error":
            await message.answer(response["message"])
    elif response["status"] == "error":
        if response["message"] == "Internal server error":    
            await message.answer("–í—ã –µ—â—ë –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã. –ù–∞–∂–º–∏—Ç–µ /start –¥–ª—è –Ω–∞—á–∞–ª–∞ —Ä–∞–±–æ—Ç—ã")
        else:
            await message.answer(response["message"])

async def generate_clients_report(message: types.Message, telegram_id: str, u_name: str = None):
    log.info(f"generate_clients_report")
    clients_report_url = SERVER_URL + "/generate_clients_report"
    user_data = {"telegram_id": telegram_id}

    log.info(f"telegram_id {telegram_id}")
    log.info(f"clients_report_url {clients_report_url}")
    log.info(f"user_data {user_data}")

    keyboard = InlineKeyboardMarkup(row_width=1)
    keyboard.add(
        InlineKeyboardButton("–ù–∞–ø–µ—á–∞—Ç–∞—Ç—å —Å–ø–∏—Å–æ–∫ –≤ –±–æ—Ç–µ", callback_data='report_list_as_is'),
        InlineKeyboardButton("–ù–∞–ø–µ—á–∞—Ç–∞—Ç—å —Å–ø–∏—Å–æ–∫ –≤ Excel-—Ç–∞–±–ª–∏—Ü–µ", callback_data='report_list_as_file'),
        InlineKeyboardButton("–ü–æ—Å—Ç—Ä–æ–∏—Ç—å –≥—Ä–∞—Ñ–∏–∫ –æ–ø–ª–∞—Ç —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤", callback_data='request_referral_chart'),
        InlineKeyboardButton("–ù–∞–∑–∞–¥", callback_data='earn_new_clients')
    )

    response = await send_request(
        clients_report_url,
        method="POST",
        json=user_data
    )

    if response["status"] == "success":
        report = response["report"]
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç –æ—Ç—á–µ—Ç–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ –¥–∞–Ω–Ω—ã—Ö –∏–∑ –æ—Ç–≤–µ—Ç–∞
        username = report.get("username")
        balance = report.get("balance")
        invited_list = report.get("invited_list")
        total_payout = report.get("total_payout")
        paid_count = report.get("paid_count")

        log.info(f"username {username}")
        log.info(f"invited_list {invited_list}")

        report = (
            f"<b>–û—Ç—á—ë—Ç –¥–ª—è {username}:</b>\n\n"
            f"üë®‚Äçüéì –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–∏–≤–ª–µ—á—ë–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π, –æ–ø–ª–∞—Ç–∏–≤—à–∏—Ö –∫—É—Ä—Å: {paid_count}\n"
            f"üí∏ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤—ã–ø–ª–∞—á–µ–Ω–Ω—ã—Ö –¥–µ–Ω–µ–≥: {total_payout:.2f} —Ä—É–±.\n"
            f"üí∞ –ë–∞–ª–∞–Ω—Å: {balance} —Ä—É–±.\n"
        )

        await bot.send_video(
            chat_id=message.chat.id,
            video=REPORT_VIDEO_URL,
            caption=report,
            parse_mode=ParseMode.HTML,
            reply_markup=keyboard
        )
    elif response["status"] == "error":
        await message.answer(response["message"])

async def report_list_as_is(message: types.Message, telegram_id: str, u_name: str = None):
    log.info(f"report_list_as_is")
    generate_clients_report_list_as_is_url = SERVER_URL + "/generate_clients_report_list_as_is"
    user_data = {"telegram_id": telegram_id}

    log.info(f"telegram_id {telegram_id}")
    log.info(f"generate_clients_report_list_as_is_url {generate_clients_report_list_as_is_url}")
    log.info(f"user_data {user_data}")

    keyboard = InlineKeyboardMarkup(row_width=1)
    keyboard.add(
        InlineKeyboardButton("–ù–∞–∑–∞–¥", callback_data='earn_new_clients')
    )

    response = await send_request(
        generate_clients_report_list_as_is_url,
        method="POST",
        json=user_data
    )

    if response["status"] == "success":
        invited_list = response.get("invited_list")

        # Send the list of invited users
        if invited_list:
            log.info(f"invited_list {invited_list}")
            for invited in invited_list:
                log.info(f"invited_list invited –ø–µ—Ä–µ–±–æ—Ä –Ω–∞—á–∞–ª—Å—è")
                user_info = (
                    f"<b>–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å:</b> {invited['username']}\n"
                    f"<b>Telegram ID:</b> {invited['telegram_id']}\n"
                    f"<b>–î–∞—Ç–∞ –∏ –≤—Ä–µ–º—è –ø–µ—Ä–≤–æ–≥–æ –≤—Ö–æ–¥–∞ –≤ –±–æ—Ç–∞:</b> {invited['start_working_date']}\n"
                    f"<b>–î–∞—Ç–∞ –∏ –≤—Ä–µ–º—è –æ–ø–ª–∞—Ç—ã –∫—É—Ä—Å–∞:</b> {invited['payment_date']}\n"
                    f"<b>–í—Ä–µ–º—è –æ—Ç –ø–µ—Ä–≤–æ–≥–æ –≤—Ö–æ–¥–∞ –¥–æ –æ–ø–ª–∞—Ç—ã:</b> {invited['time_for_pay']}\n"
                )
                log.info(f"user_info {user_info}")
                await bot.send_message(
                    chat_id=message.chat.id,
                    text=user_info,
                    parse_mode=ParseMode.HTML
                )
        await bot.send_message(
            message.chat.id,
            f"–ß—Ç–æ-–Ω–∏–±—É–¥—å –µ—â—ë?",
            reply_markup=keyboard
        )
    elif response["status"] == "error":
        await message.answer(response["message"])

async def report_list_as_file(message: types.Message, telegram_id: str, u_name: str = None):
    log.info(f"report_list_as_file –≤—ã–∑–≤–∞–Ω –¥–ª—è {telegram_id}")
    url = SERVER_URL + "/generate_clients_report_list_as_file"
    user_data = {"telegram_id": telegram_id}

    keyboard = InlineKeyboardMarkup(row_width=1)
    keyboard.add(InlineKeyboardButton("–ù–∞–∑–∞–¥", callback_data="earn_new_clients"))

    response = await send_request(url, method="POST", json=user_data)

    # 1Ô∏è‚É£ –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Å–µ—Ä–≤–µ—Ä –Ω–µ –≤–µ—Ä–Ω—É–ª –æ—à–∏–±–∫—É
    if isinstance(response, dict):
        log.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç—á—ë—Ç–∞: {response}")
        await message.answer(response.get("message", "–û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç—á—ë—Ç–∞"), reply_markup=keyboard)
        return

    # 2Ô∏è‚É£ –ò—Å–ø–æ–ª—å–∑—É–µ–º BytesIO –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å —Ñ–∞–π–ª–æ–º –≤ –ø–∞–º—è—Ç–∏
    try:
        file_stream = io.BytesIO(response)  # response ‚Äî —ç—Ç–æ –±–∏–Ω–∞—Ä–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ (—Ñ–∞–π–ª)
        file_stream.name = "clients_report.xlsx"  # Telegram —Ç—Ä–µ–±—É–µ—Ç –∏–º—è —Ñ–∞–π–ª–∞

        # 3Ô∏è‚É£ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–∞–π–ª –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        await bot.send_document(
            message.chat.id,
            InputFile(file_stream),
            reply_markup=keyboard
        )

    except Exception as e:
        log.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Ñ–∞–π–ª–∞: {e}")
        await message.answer("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –æ—Ç—á—ë—Ç–∞", reply_markup=keyboard)

async def request_referral_chart(message: types.Message, telegram_id: str, u_name: str = None):
    log.info(f"inside request_referral_chart")
    url = f"{SERVER_URL}/generate_referral_chart_link"
    payload = {"telegram_id": telegram_id}
    log.info(f"payload {payload}")

    keyboard = InlineKeyboardMarkup(row_width=1)
    keyboard.add(
        InlineKeyboardButton("–ù–∞–∑–∞–¥", callback_data='earn_new_clients')
    )

    response = await send_request(
        url,
        method="POST",
        json=payload
    )

    log.info(f"response {response}")

    if response["status"] == "success":
        data = response.get("data")
        chart_url = data.get("chart_url")
        await bot.send_message(
            chat_id=message.chat.id,
            text=f"–í–∞—à –≥—Ä–∞—Ñ–∏–∫ –¥–æ—Å—Ç—É–ø–µ–Ω –ø–æ —Å—Å—ã–ª–∫–µ:\n\n{chart_url}",
            reply_markup=keyboard
        )
    elif response["status"] == "error":
        await bot.send_message(
            chat_id=message.chat.id,
            text=response["message"],
            reply_markup=keyboard
        )

async def bind_card(message: types.Message, telegram_id: str, u_name: str = None):
    bind_card_url = SERVER_URL + "/bind_card"
    user_data = {"telegram_id": telegram_id}
    response = await send_request(
        bind_card_url,
        method="POST",
        json=user_data
    )
    if response["status"] == "success":
        binding_url = response["binding_url"]
        log.info(f"binding_url {binding_url}")
        keyboard = InlineKeyboardMarkup(row_width=1)
        keyboard.add(
            InlineKeyboardButton("–ù–∞–∑–∞–¥", callback_data='earn_new_clients')
        )
        text = ""
        if binding_url:
            text = f"–ü–µ—Ä–µ–π–¥–∏—Ç–µ –ø–æ —Å–ª–µ–¥—É—é—â–µ–π —Å—Å—ã–ª–∫–µ –¥–ª—è –ø—Ä–∏–≤—è–∑–∫–∏ –∫–∞—Ä—Ç—ã: {binding_url}"
        else:
            text = "–û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Å—Å—ã–ª–∫–∏."
        await bot.send_message(
            chat_id=message.chat.id,
            text=text,
            reply_markup=keyboard
        )
    elif response["status"] == "error":
        await message.answer(response["message"])
        return

async def send_referral_link(message: types.Message, telegram_id: str, u_name: str = None):
    log.info(f"send_referral_link")
    init_user_cache(telegram_id)
    keyboard = InlineKeyboardMarkup(row_width=1)
    keyboard.add(
        InlineKeyboardButton("–ù–∞–∑–∞–¥", callback_data='earn_new_clients')
    )

    if links_cache[telegram_id]['referral_link'] is not None:
        log.info(f"–∏–∑ –∫—ç—à–∞")
        await bot.send_video(
            chat_id=message.chat.id,
            video=REFERRAL_VIDEO_URL,
            caption=(
                f"–û—Ç–ø—Ä–∞–≤–ª—è—é —Ç–µ–±–µ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—É—é —Å—Å—ã–ª–∫—É:\n{links_cache[telegram_id]['referral_link']}\n"
                f"–ó–∞—Ä–∞–±–∞—Ç—ã–≤–∞–π, –ø—Ä–æ–¥–≤–∏–≥–∞—è It - –æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ."
            ),
            reply_markup=keyboard
        )
        return 
    
    referral_url = SERVER_URL + "/get_referral_link"
    user_data = {"telegram_id": telegram_id}

    log.info(f"telegram_id {telegram_id}")
    log.info(f"referral_url {referral_url}")
    log.info(f"user_data {user_data}")

    response = await send_request(
        referral_url,
        method="POST",
        json=user_data
    ) 

    text = ""

    if response["status"] == "success":
        referral_link = response.get("referral_link")
        links_cache[telegram_id]['referral_link'] = referral_link
        
        log.info(f"referral_link {referral_link}")

        await bot.send_video(
            chat_id=message.chat.id,
            video=REFERRAL_VIDEO_URL,
            caption=(
                f"–û—Ç–ø—Ä–∞–≤–ª—è—é —Ç–µ–±–µ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—É—é —Å—Å—ã–ª–∫—É:\n{referral_link}\n"
                f"–ó–∞—Ä–∞–±–∞—Ç—ã–≤–∞–π, –ø—Ä–æ–¥–≤–∏–≥–∞—è It - –æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ."
            ),
            reply_markup=keyboard
        )

        return

    elif response["status"] == "error":
        text = response["message"]
    else:
        text = "–û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Å—Å—ã–ª–∫–∏"
    await bot.send_message(
        chat_id=message.chat.id,
        text=text,
        reply_markup=keyboard
    )

# async def send_invite_link(message: types.Message, telegram_id: str, u_name: str = None):
#     log.info(f"send_invite_link")
#     init_user_cache(telegram_id)
    
#     keyboard = InlineKeyboardMarkup(row_width=1)
#     keyboard.add(
#         InlineKeyboardButton("–ù–∞–∑–∞–¥", callback_data='earn_new_clients')
#     )

#     if links_cache[telegram_id]['invite_link'] is not None:
#         log.info(f"–∏–∑ –∫—ç—à–∞")
#         await bot.send_video(
#             chat_id=message.chat.id,
#             video=REFERRAL_VIDEO_URL,
#             caption=(
#                 f"–í–æ—Ç —Å—Å—ã–ª–∫–∞ –¥–ª—è –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è –∫ –Ω–∞—à–µ–π –≥—Ä—É–ø–ø–µ. –û–±—Ä–∞—â–∞–π—Ç–µ—Å—å —Å –Ω–µ–π –æ—á–µ–Ω—å –∞–∫–∫—É—Ä–∞—Ç–Ω–æ. –û–Ω–∞ –æ–¥–Ω–æ—Ä–∞–∑–æ–≤–∞—è –∏ –µ—Å–ª–∏ –≤—ã –≤–æ—Å–ø–æ–ª—å–∑—É–µ—Ç–µ—Å—å –µ–¥–∏–Ω—Å—Ç–≤–µ–Ω–Ω—ã–º —à–∞–Ω—Å–æ–º –Ω–µ–≤–µ—Ä–Ω–æ, –∏—Å–ø—Ä–∞–≤–∏—Ç—å –Ω–∏—á–µ–≥–æ –Ω–µ –ø–æ–ª—É—á–∏—Ç—Å—è: {links_cache[telegram_id]['invite_link']}"
#             ),
#             reply_markup=keyboard
#         )
#         return 

#     invite_url = SERVER_URL + "/get_invite_link"
#     user_data = {"telegram_id": telegram_id}

#     log.info(f"user_data {user_data}")

#     response = await send_request(
#         invite_url,
#         method="POST",
#         json=user_data
#     ) 

#     text = ""

#     if response["status"] == "success":
#         invite_link = response.get("invite_link")
#         links_cache[telegram_id]['invite_link'] = invite_link
        
#         log.info(f"invite_link {invite_link}")

#         await bot.send_video(
#             chat_id=message.chat.id,
#             video=REFERRAL_VIDEO_URL,
#             caption=(
#                 f"–í–æ—Ç —Å—Å—ã–ª–∫–∞ –¥–ª—è –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è –∫ –Ω–∞—à–µ–π –≥—Ä—É–ø–ø–µ. –û–±—Ä–∞—â–∞–π—Ç–µ—Å—å —Å –Ω–µ–π –æ—á–µ–Ω—å –∞–∫–∫—É—Ä–∞—Ç–Ω–æ. –û–Ω–∞ –æ–¥–Ω–æ—Ä–∞–∑–æ–≤–∞—è –∏ –µ—Å–ª–∏ –≤—ã –≤–æ—Å–ø–æ–ª—å–∑—É–µ—Ç–µ—Å—å –µ–¥–∏–Ω—Å—Ç–≤–µ–Ω–Ω—ã–º —à–∞–Ω—Å–æ–º –Ω–µ–≤–µ—Ä–Ω–æ, –∏—Å–ø—Ä–∞–≤–∏—Ç—å –Ω–∏—á–µ–≥–æ –Ω–µ –ø–æ–ª—É—á–∏—Ç—Å—è: {invite_link}"
#             ),
#             reply_markup=keyboard
#         )

#         return

#     elif response["status"] == "error":
#         text = response["message"]
#     else:
#         text = "–û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Å—Å—ã–ª–∫–∏"
#     await bot.send_message(
#         chat_id=message.chat.id,
#         text=text,
#         reply_markup=keyboard
#     )

async def earn_new_clients(message: types.Message, telegram_id: str, u_name: str = None):
    keyboard = InlineKeyboardMarkup(row_width=1)
    log.info(f"telegram_id {telegram_id}")
    log.info(f"{MAIN_TELEGRAM_ID}")
    log.info(f"telegram_id = MAIN_TELEGRAM_ID{telegram_id == MAIN_TELEGRAM_ID}")
    
    if str(telegram_id) == str(MAIN_TELEGRAM_ID):
        keyboard.add(
            InlineKeyboardButton("–ê–¥–º–∏–Ω üëë", callback_data='admin'),
        )

    keyboard.add(
        InlineKeyboardButton("–°–ø–∏—Å–æ–∫ –ª–∏–¥–µ—Ä–æ–≤ ü§¥", callback_data='get_top_referrers'),
        InlineKeyboardButton("–ü—Ä–∏–≤—è–∑–∞—Ç—å/–∏–∑–º–µ–Ω–∏—Ç—å –∫–∞—Ä—Ç—É üíé", callback_data='bind_card'),
        InlineKeyboardButton("–ü–æ–ª—É—á–∏—Ç—å —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—É—é —Å—Å—ã–ª–∫—É üöÄ", callback_data='get_referral'),
        InlineKeyboardButton("–°—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞—Ç—å –æ—Ç—á—ë—Ç –æ –∑–∞—Ä–∞–±–æ—Ç–∫–µ üè∞", callback_data='generate_report'),
        InlineKeyboardButton("–ù–∞–ª–æ–≥–∏ üè´", callback_data='tax_info'),
        InlineKeyboardButton("–î–æ–∫—É–º–µ–Ω—Ç—ã üìö", callback_data='documents'),
        InlineKeyboardButton("–ù–∞–∑–∞–¥", callback_data='start'),
    )

    await bot.send_video(
        chat_id=message.chat.id,
        video=EARN_NEW_CLIENTS_VIDEO_URL,
        caption=f"üí∏–ö—É—Ä—Å —Å—Ç–æ–∏—Ç {COURSE_AMOUNT} —Ä—É–±–ª–µ–π.üí∏\n- –ó–∞ –∫–∞–∂–¥–æ–≥–æ –¥—Ä—É–≥–∞, –∫–æ—Ç–æ—Ä—ã–π –∫—É–ø–∏–ª –∫—É—Ä—Å, —Ç—ã –∑–∞—Ä–∞–±–æ—Ç–∞–µ—à—å {REFERRAL_AMOUNT} —Ä—É–±–ª–µ–π.\n- –ü—Ä–∏–≤–µ–¥–∏ 3-—Ö —Ç–∞–∫–∏—Ö –¥—Ä—É–∑–µ–π –∏ –æ—Ç–±–µ–π —Å—Ç–æ–∏–º–æ—Å—Ç—å –∫—É—Ä—Å–∞.\n- –ù–∞—á–∏–Ω–∞—è —Å 4-–≥–æ –¥—Ä—É–≥–∞, —Ç—ã –Ω–∞—á–Ω—ë—à—å –∑–∞—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å."
    )
    await bot.send_message(
        message.chat.id,
        f"–¢–≤–æ–∏ –¥—Ä—É–∑—å—è –æ–±—ã—á–Ω–æ —Å–∏–¥—è—Ç:\n- –≤ —á–∞—Ç–∞—Ö –ø–æ –∏–∑—É—á–µ–Ω–∏—é –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏—è üë©‚Äçüíª\n- –≤ —Ç–≥-–≥—Ä—É–ø–ø–∞—Ö —Ä–æ—Å—Å–∏–π—Å–∫–∏—Ö –í–£–ó–æ–≤ üè§.\n\n–¢—ã –≤—ã–π–¥–µ—à—å –Ω–∞ –ü–†–ò–ë–´–õ–¨ –≤ {float(REFERRAL_AMOUNT)*50} —Ä—É–±–ª–µ–π –ø–æ—Å–ª–µ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è 50 –¥—Ä—É–∑–µ–π.üåç\n\n–î—Ä—É–∂–∏—Ç—å - —ç—Ç–æ –ø–æ–ª–µ–∑–Ω–æ üçØ \n\n–ü–µ—Ä–µ–¥ —Ç–µ–º –∫–∞–∫ –Ω–∞—á–∞—Ç—å, –µ—â—ë —Ä–∞–∑ –≤–Ω–∏–º–∞—Ç–µ–ª—å–Ω–æ –ø—Ä–æ—á–∏—Ç–∞–π –¥–æ–∫—É–º–µ–Ω—Ç—ã –Ω–∞ –≤—Å—è–∫–∏–π —Å–ª—É—á–∞–π. üìö",
        reply_markup=keyboard
    )

async def admin(message: types.Message, telegram_id: str, u_name: str = None):
    keyboard = InlineKeyboardMarkup(row_width=1)
    keyboard.add(
        InlineKeyboardButton("–ú—É–ª—å—Ç–∏–ø–ª–∏–∫–∞—Ç–æ—Ä—ã üèõ", callback_data='get_source_referral_stats'),
        InlineKeyboardButton("–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –≤—ã–ø–ª–∞—Ç–∞—Ö üí≥", callback_data='get_payout_balance'),
        InlineKeyboardButton("–ü—Ä–æ–º–æ–∫–æ–¥–µ—Ä—ã –ø–æ –¥–∞—Ç–∞–º üêù", callback_data='get_promo_users_frequency'),
        InlineKeyboardButton("–û–ø–ª–∞—Ç—ã –ø–æ –¥–∞—Ç–∞–º üç∞", callback_data='get_payments_frequency'),
        InlineKeyboardButton("–ù–∞–∑–∞–¥", callback_data='earn_new_clients'),
    )
    log.info(f"telegram_id {telegram_id}")
    log.info(f"{MAIN_TELEGRAM_ID}")
    log.info(f"telegram_id = MAIN_TELEGRAM_ID{telegram_id == MAIN_TELEGRAM_ID}")

    await bot.send_message(
        message.chat.id,
        f"–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, –º–∏—Å—Ç–µ—Ä –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä!",
        reply_markup=keyboard
    )

async def get_payout_balance(message: types.Message, telegram_id: str, u_name: str = None):
    log.info(f"–ü–æ–ª—É—á–µ–Ω–∞ –∫–æ–º–∞–Ω–¥–∞ /get_payout_balance –æ—Ç {telegram_id}")

    get_payout_balance_url = SERVER_URL + "/payout_balance"

    if str(telegram_id) == str(MAIN_TELEGRAM_ID):
        response = await send_request(
            get_payout_balance_url,
            method="POST",
            json={}
        )
        log.info(f"response {response}")

        if response["status"] == "success":
            data = response["data"]
            total_balance = data["total_balance"]
            total_extra = data["total_extra"]
            num_of_users = data["num_of_users"]
            num_of_users_plus_30 = data["num_of_users_plus_30"]
            result = data["result"]
            users = data["users"]
            keyboard = InlineKeyboardMarkup(row_width=1)
            keyboard.add(
                InlineKeyboardButton("–ù–∞–∑–∞–¥", callback_data='start'),
            )
            report = (
                f"<b>–û—Ç—á—ë—Ç:</b>\n\n"
                f"–û–±—â–∏–π –±–∞–ª–∞–Ω—Å: {total_balance}\n"
                f"–û–±—â–∏–π –ø—Ä–æ—Ü–µ–Ω—Ç: {total_extra}\n"
                f"–ß–∏—Å–ª–æ —Ä–µ—Ñ–µ—Ä–µ—Ä–æ–≤: {num_of_users}\n"
                f"–û–±—â–∞—è —Å—É–º–º–∞ +30 —Ä—É–±–ª–µ–π –∑–∞ –∫–∞–∂–¥–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {num_of_users_plus_30}\n"
                f"–ò—Ç–æ–≥–æ: {result}"
            )
            await bot.send_message(
                chat_id=message.chat.id,
                text=report,
                parse_mode=ParseMode.HTML
            )
            log.info(f"response data {data}")
            if users:
                log.info(f"users {users}")
                for user in users:
                    log.info(f"users –ø–µ—Ä–µ–±–æ—Ä –Ω–∞—á–∞–ª—Å—è")
                    user_info = (
                        f"<b>Telegram ID:</b> {user['id']}\n"
                        f"<b>–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å:</b> {user['name']}\n\n"
                    )
                    log.info(f"user_info {user_info}")
                    await bot.send_message(
                        chat_id=message.chat.id,
                        text=user_info,
                        parse_mode=ParseMode.HTML
                    )
            await bot.send_message(
                message.chat.id,
                f"–ß—Ç–æ-–Ω–∏–±—É–¥—å –µ—â—ë?",
                reply_markup=keyboard
            )
    elif response["status"] == "error":
        await message.answer(response["message"])

async def get_promo_users_frequency(message: types.Message, telegram_id: str, u_name: str = None):
    log.info(f"–ü–æ–ª—É—á–µ–Ω–∞ –∫–æ–º–∞–Ω–¥–∞ /get_promo_users_frequency –æ—Ç {telegram_id}")

    get_promo_users_frequency_url = SERVER_URL + "/get_promo_users_frequency"

    if str(telegram_id) == str(MAIN_TELEGRAM_ID):
        response = await send_request(
            get_promo_users_frequency_url,
            method="POST",
            json={"message": "hey"}
        )
        log.info(f"response {response}")

        if response["status"] == "success":
            data = response["data"]
            number_of_promo = data["number_of_promo"]
            promo_num_left = data["promo_num_left"]
            promo_users = data["promo_users_frequency"]
            keyboard = InlineKeyboardMarkup(row_width=1)
            keyboard.add(
                InlineKeyboardButton("–ù–∞–∑–∞–¥", callback_data='admin'),
            )
            log.info(f"response data {response}")
            await bot.send_message(
                chat_id=message.chat.id,
                text=f"–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–≤–æ–±–æ–¥–Ω—ã—Ö –ø—Ä–æ–º–æ–∫–æ–¥–æ–≤: {promo_num_left}\n–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ø–æ –ø—Ä–æ–º–æ–∫–æ–¥—É: {number_of_promo}"
            )
            if promo_users:
                log.info(f"users {promo_users}")
                await bot.send_message(
                    chat_id=message.chat.id,
                    text="–°–ø–∏—Å–æ–∫ –ø—Ä–æ–º–æ–∫–æ–¥–µ—Ä–æ–≤ –ø–æ –¥–∞—Ç–∞–º:"
                )
                for user in promo_users:
                    log.info(f"promo_users –ø–µ—Ä–µ–±–æ—Ä –Ω–∞—á–∞–ª—Å—è")
                    
                    user_info = f"{user['date']}\t{user['promo_users_count']}"
                    log.info(f"user_info {user_info}")
                    await bot.send_message(
                        chat_id=message.chat.id,
                        text=user_info,
                        parse_mode=ParseMode.HTML
                    )
            await bot.send_message(
                message.chat.id,
                f"–ß—Ç–æ-–Ω–∏–±—É–¥—å –µ—â—ë?",
                reply_markup=keyboard
            )
    elif response["status"] == "error":
        await message.answer(response["message"])

async def get_payments_frequency(message: types.Message, telegram_id: str, u_name: str = None):
    log.info(f"–ü–æ–ª—É—á–µ–Ω–∞ –∫–æ–º–∞–Ω–¥–∞ /get_payments_frequency –æ—Ç {telegram_id}")

    get_payments_frequency_url = SERVER_URL + "/get_payments_frequency"

    if str(telegram_id) == str(MAIN_TELEGRAM_ID):
        response = await send_request(
            get_payments_frequency_url,
            method="POST",
            json={"message": "hey"}
        )
        log.info(f"response {response}")

        if response["status"] == "success":
            data = response["data"]
            payments_frequency = data["payments_frequency"]
            keyboard = InlineKeyboardMarkup(row_width=1)
            keyboard.add(
                InlineKeyboardButton("–ù–∞–∑–∞–¥", callback_data='admin'),
            )
            log.info(f"response data {response}")
            if payments_frequency:
                log.info(f"payments_frequency {payments_frequency}")
                await bot.send_message(
                    chat_id=message.chat.id,
                    text="–°–ø–∏—Å–æ–∫ –æ–ø–ª–∞—Ç –ø–æ –¥–∞—Ç–∞–º:"
                )
                for payment in payments_frequency:
                    log.info(f"promo_users –ø–µ—Ä–µ–±–æ—Ä –Ω–∞—á–∞–ª—Å—è")
                    
                    payments_info = f"{payment['date']}\t{payment['payments_count']}"
                    log.info(f"payments_info {payments_info}")
                    await bot.send_message(
                        chat_id=message.chat.id,
                        text=payments_info,
                        parse_mode=ParseMode.HTML
                    )
            await bot.send_message(
                message.chat.id,
                f"–ß—Ç–æ-–Ω–∏–±—É–¥—å –µ—â—ë?",
                reply_markup=keyboard
            )
    elif response["status"] == "error":
        await message.answer(response["message"])

async def get_source_referral_stats(message: types.Message, telegram_id: str, u_name: str = None):
    log.info(f"–ü–æ–ª—É—á–µ–Ω–∞ –∫–æ–º–∞–Ω–¥–∞ /get_source_referral_stats –æ—Ç {telegram_id}")

    url = SERVER_URL + "/get_multiplicators"

    if str(telegram_id) == str(MAIN_TELEGRAM_ID):
        response = await send_request(
            url,
            method="POST",
            json={"telegram_id": telegram_id}
        )
        log.info(f"response {response}")

        if response["status"] == "success":
            result = response.get("result", {})
            source_stats = result.get("source_stats", [])
            referral_stats = result.get("referral_stats", [])
            log.info(f"source_stats {source_stats}")
            log.info(f"referral_stats {referral_stats}")

            # –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ç—á–µ—Ç–∞ –ø–æ –∏—Å—Ç–æ—á–Ω–∏–∫–∞–º
            source_report = "–û—Ç—á–µ—Ç –ø–æ –∏—Å—Ç–æ—á–Ω–∏–∫–∞–º:\n\n"
            if source_stats:
                for source in source_stats:
                    source_report += f"- –ò—Å—Ç–æ—á–Ω–∏–∫: {source.get('–ò—Å—Ç–æ—á–Ω–∏–∫', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')}\n"
                    source_report += f"- –í—Å–µ–≥–æ: {source.get('–í—Å–µ–≥–æ', 0)}\n"
                    source_report += f"- –ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–ª–∏—Å—å: {source.get('–ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–ª–∏—Å—å', 0)}\n"
                    source_report += f"- –ü—Ä–æ—Ü–µ–Ω—Ç —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–π: {source.get('% –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–π', '0.0')}%\n"
                    source_report += f"- –û–ø–ª–∞—Ç–∏–ª–∏: {source.get('–û–ø–ª–∞—Ç–∏–ª–∏', 0)}\n"
                    source_report += f"- –ü—Ä–æ—Ü–µ–Ω—Ç –æ–ø–ª–∞—Ç –æ—Ç –≤—Å–µ—Ö: {source.get('% –û–ø–ª–∞—Ç –æ—Ç –≤—Å–µ—Ö', '0.0')}%\n"
                    source_report += f"- –ü—Ä–æ—Ü–µ–Ω—Ç –æ–ø–ª–∞—Ç –æ—Ç –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö: {source.get('% –û–ø–ª–∞—Ç –æ—Ç –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö', '0.0')}%\n"
                    source_report += "\n"  # –†–∞–∑–¥–µ–ª–µ–Ω–∏–µ –¥–ª—è —Å–ª–µ–¥—É—é—â–µ–≥–æ –∏—Å—Ç–æ—á–Ω–∏–∫–∞
            else:
                source_report += "–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –ø–æ –∏—Å—Ç–æ—á–Ω–∏–∫–∞–º.\n"
            # –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ç—á–µ—Ç–∞ –ø–æ —Ä–µ—Ñ–µ—Ä–∞–ª–∞–º
            referral_report = "–û—Ç—á–µ—Ç –ø–æ —Ä–µ—Ñ–µ—Ä–∞–ª–∞–º:\n\n"

            if referral_stats:
                for referral in referral_stats:
                    referrer_id = referral.get('–†–µ—Ñ–µ—Ä–µ—Ä ID', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')
                    referred = referral.get('–ü—Ä–∏—à–ª–æ –ø–æ —Ä–µ—Ñ–µ—Ä–∞–ª–∫–µ', 0)
                    registered = referral.get('–ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–ª–∏—Å—å', 0)
                    registration_percentage = referral.get('% –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–π', '0.0')
                    paid = referral.get('–û–ø–ª–∞—Ç–∏–ª–∏', 0)
                    paid_percentage = referral.get('% –û–ø–ª–∞—Ç –æ—Ç –≤—Å–µ—Ö', '0.0')
                    paid_registration_percentage = referral.get('% –û–ø–ª–∞—Ç –æ—Ç –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö', '0.0')

                    referral_report += f"- –†–µ—Ñ–µ—Ä–µ—Ä ID: {referrer_id}\n"
                    referral_report += f"- –ü—Ä–∏—à–ª–æ –ø–æ —Ä–µ—Ñ–µ—Ä–∞–ª–∫–µ: {referred}\n"
                    referral_report += f"- –ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–ª–∏—Å—å: {registered}\n"
                    referral_report += f"- –ü—Ä–æ—Ü–µ–Ω—Ç —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–π: {registration_percentage}%\n"
                    referral_report += f"- –û–ø–ª–∞—Ç–∏–ª–∏: {paid}\n"
                    referral_report += f"- –ü—Ä–æ—Ü–µ–Ω—Ç –æ–ø–ª–∞—Ç –æ—Ç –≤—Å–µ—Ö: {paid_percentage}%\n"
                    referral_report += f"- –ü—Ä–æ—Ü–µ–Ω—Ç –æ–ø–ª–∞—Ç –æ—Ç –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö: {paid_registration_percentage}%\n"
                    referral_report += "\n"  # –†–∞–∑–¥–µ–ª–µ–Ω–∏–µ –¥–ª—è —Å–ª–µ–¥—É—é—â–µ–≥–æ —Ä–µ—Ñ–µ—Ä–∞–ª–∞
            else:
                referral_report += "–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –ø–æ —Ä–µ—Ñ–µ—Ä–∞–ª–∞–º.\n"
            # –ö–Ω–æ–ø–∫–∞ "–ù–∞–∑–∞–¥"
            keyboard = InlineKeyboardMarkup(row_width=1)
            keyboard.add(InlineKeyboardButton("–ù–∞–∑–∞–¥", callback_data='admin'))

            log.info(f"Before source_report {source_report}")
            log.info(f"Before referral_report {referral_report}")

            # –û—Ç–ø—Ä–∞–≤–∫–∞ –æ—Ç—á—ë—Ç–∞ –ø–æ –∏—Å—Ç–æ—á–Ω–∏–∫–∞–º
            if source_report:
                source_parts = [source_report[i:i+4000] for i in range(0, len(source_report), 4000)]
                for part in source_parts:
                    await bot.send_message(
                        chat_id=message.chat.id,
                        text=part,
                        parse_mode="HTML",
                        reply_markup=keyboard if part == source_parts[-1] else None
                    )
                    await asyncio.sleep(1)

            # –û—Ç–ø—Ä–∞–≤–∫–∞ –æ—Ç—á—ë—Ç–∞ –ø–æ —Ä–µ—Ñ–µ—Ä–∞–ª–∞–º
            if referral_report:
                referral_parts = [referral_report[i:i+4000] for i in range(0, len(referral_report), 4000)]
                for part in referral_parts:
                    await bot.send_message(
                        chat_id=message.chat.id,
                        text=part,
                        parse_mode="HTML",
                        reply_markup=keyboard if part == referral_parts[-1] else None
                    )

            elif response["status"] == "error":
                await message.answer(response.get("message", "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –æ—Ç—á—ë—Ç–∞."))
    else:
        await message.answer("–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥–µ.")

async def type_promo(message: types.Message, telegram_id: str, u_name: str = None):
    await bot.send_message(
        chat_id=message.chat.id,
        text="–í–≤–µ–¥–∏—Ç–µ –ø—Ä–æ–º–æ–∫–æ–¥ –±–µ–∑ –ø—Ä–æ–±–µ–ª–æ–≤:"
    )

# –ü—Ä–æ–º–æ–∫–æ–¥–µ—Ä—ã —É–ø—Ä–∞–∑–¥–Ω–µ–Ω—ã
# async def handle_promo_input(message: types.Message, telegram_id: str, u_name: str = None):
#     promo_code = message.text.strip()
#     log.info("–í–≤–µ–¥—ë–Ω–Ω—ã–π –ø—Ä–æ–º–æ–∫–æ–¥")
#     if str(promo_code) == str(PROMO_CODE):
#         log.info("–í–µ—Ä–Ω—ã–π –ø—Ä–æ–º–æ–∫–æ–¥")
#         register_user_with_promo_url = SERVER_URL + "/register_user_with_promo"
#         telegram_id = message.from_user.id
#         user_data = {"telegram_id": telegram_id}
#         response = await send_request(
#             register_user_with_promo_url,
#             method="POST",
#             json=user_data
#         )
#         if response["status"] == "error":
#             text = response["message"]
#             await bot.send_message(
#                 chat_id=message.chat.id,
#                 text=text
#             )

async def generate_report(message: types.Message, telegram_id: str, u_name: str = None):
    keyboard = InlineKeyboardMarkup(row_width=1)
    keyboard.add(
        InlineKeyboardButton("–û–±—â–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è üåç", callback_data='report_overview'),
        InlineKeyboardButton("–°–ø–∏—Å–æ–∫ –ø—Ä–∏–≤–ª–µ—á—ë–Ω–Ω—ã—Ö –∫–ª–∏–µ–Ω—Ç–æ–≤ üë®‚Äçüë©‚Äçüëß‚Äçüë¶", callback_data='report_clients'),
        InlineKeyboardButton("–ù–∞–∑–∞–¥", callback_data='earn_new_clients')
    )
    await bot.send_message(
        chat_id=message.chat.id,
        text="–ö–∞–∫–æ–π –æ—Ç—á—ë—Ç –≤—ã —Ö–æ—Ç–∏—Ç–µ —Å—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞—Ç—å?",
        reply_markup=keyboard
    )

async def get_tax_info(message: types.Message, telegram_id: str, u_name: str = None):
    await bot.send_photo(
        chat_id=message.chat.id,
        photo=TAX_INFO_IMG_URL,
        caption="–†–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã–µ –≤—ã–ø–ª–∞—Ç—ã –º–æ–≥—É—Ç –æ–±–ª–∞–≥–∞—Ç—å—Å—è –Ω–∞–ª–æ–≥–æ–º. –†–µ–∫–æ–º–µ–Ω–¥—É–µ–º –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è –∫–∞–∫ —Å–∞–º–æ–∑–∞–Ω—è—Ç—ã–π."
    )
    
    keyboard = InlineKeyboardMarkup(row_width=1)
    keyboard.add(
        InlineKeyboardButton("–ù–∞–∑–∞–¥", callback_data='earn_new_clients')
    )

    info_text = """
    <b>–ö–∞–∫ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è –∏ –≤—ã–±—Ä–∞—Ç—å –≤–∏–¥ –¥–µ—è—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –¥–ª—è —É–ø–ª–∞—Ç—ã –Ω–∞–ª–æ–≥–æ–≤:</b>

    1. –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–ø–æ—Å–æ–±–∞—Ö —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –∏ –Ω–µ —Ç–æ–ª—å–∫–æ –≤—ã –º–æ–∂–µ—Ç–µ –Ω–∞–π—Ç–∏ –Ω–∞ –æ—Ñ–∏—Ü–∏–∞–ª—å–Ω–æ–º —Å–∞–π—Ç–µ <a href="https://npd.nalog.ru/app/">npd.nalog.ru/app</a>.
    
    2. –ü—Ä–∏ –≤—ã–±–æ—Ä–µ –≤–∏–¥–∞ –¥–µ—è—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ —Ä–µ–∫–æ–º–µ–Ω–¥—É–µ–º —É–∫–∞–∑–∞—Ç—å: ¬´–†–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã–µ –≤—ã–ø–ª–∞—Ç—ã¬ª –∏–ª–∏ ¬´–£—Å–ª—É–≥–∏¬ª.

    <i>–ü–æ–∫–∞ –≤—ã –ø–ª–∞—Ç–∏—Ç–µ –Ω–∞–ª–æ–≥–∏, –≤—ã –∑–∞—â–∏—â–∞–µ—Ç–µ —Å–µ–±—è –∏ –¥–µ–ª–∞–µ—Ç–µ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã–µ –≤—ã–ø–ª–∞—Ç—ã –∑–∞–∫–æ–Ω–Ω—ã–º–∏.</i>
    """
    await bot.send_message(
        chat_id=message.chat.id,
        text=info_text,
        parse_mode=ParseMode.HTML,
        reply_markup=keyboard
    )

async def get_certificate(message: types.Message, telegram_id: str, u_name: str = None):
    log.info("get_certificate called")

    await bot.send_message(
        chat_id=str(MAIN_TELEGRAM_ID),
        text=f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å telegram_id={telegram_id} username={u_name} –Ω–∞–∂–∞–ª –∫–Ω–æ–ø–∫—É /get_certificate"
    )

    await bot.send_message(
        chat_id=message.chat.id,
        text="–ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏..."
    )

    url = SERVER_URL + "/can_get_certificate"
    user_data = {"telegram_id": telegram_id}

    response = await send_request(
        url,
        method="POST",
        json=user_data
    )
    if response["status"] == "success":
        if response["result"] == "test":
            keyboard = InlineKeyboardMarkup(row_width=1)
            keyboard.add(
                InlineKeyboardButton("–°–¥–∞—Ç—å —Ç–µ—Å—Ç", callback_data='start_test'),
                InlineKeyboardButton("–ù–∞–∑–∞–¥", callback_data='earn_new_clients')
            )

            info_text = """
–î–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–∞ –≤—ã –ø—Ä–æ–π–¥—ë—Ç–µ —Ç–µ—Å—Ç, —Å–æ—Å—Ç–æ—è—â–∏–π –∏–∑ 25 –≤–æ–ø—Ä–æ—Å–æ–≤.
    - –î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å —Ç–µ—Å—Ç–∞ 30 –º–∏–Ω—É—Ç.
    - –î–ª—è —É—Å–ø–µ—à–Ω–æ–≥–æ –ø—Ä–æ—Ö–æ–∂–¥–µ–Ω–∏—è —Ç–µ—Å—Ç–∞ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –æ—Ç–≤–µ—Ç–∏—Ç—å –ø—Ä–∞–≤–∏–ª—å–Ω–æ –Ω–∞ 80 –∏ –±–æ–ª–µ–µ –ø—Ä–æ—Ü–µ–Ω—Ç–æ–≤ –≤–æ–ø—Ä–æ—Å–æ–≤.
    - –î–ª—è –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∏ –∫ —Ç–µ—Å—Ç—É —Ä–µ–∫–æ–º–µ–Ω–¥—É–µ–º –∏–∑—É—á–∏—Ç—å –≤—Å–µ –≤–∏–¥–µ–æ—É—Ä–æ–∫–∏, –∞ —Ç–∞–∫–∂–µ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –º–∞—Ç–µ—Ä–∏–∞–ª—ã, —Ö—Ä–∞–Ω—è—â–∏–µ—Å—è –≤ General.
    - –ü–µ—Ä–µ—Å–¥–∞—Ç—å —Ç–µ—Å—Ç –º–æ–∂–Ω–æ —á–µ—Ä–µ–∑ 3 –¥–Ω—è –ø–æ—Å–ª–µ –Ω–∞—á–∞–ª–∞ –ø—Ä–æ—Ö–æ–∂–¥–µ–Ω–∏—è.
    - –ù–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É, –µ—Å–ª–∏ —É–≤–µ—Ä–µ–Ω—ã –≤ —Å–≤–æ–µ–π –ø–æ–¥–≥–æ—Ç–æ–≤–∫–µ.
–ñ–µ–ª–∞–µ–º —É—Å–ø–µ—Ö–æ–≤!
            """
        elif response["result"] == "passed":
            keyboard = InlineKeyboardMarkup(row_width=1)
            keyboard.add(
                InlineKeyboardButton("–°–∫–∞—á–∞—Ç—å —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç", callback_data='download_certificate'),
                InlineKeyboardButton("–°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å —Å—Å—ã–ª–∫—É", callback_data='generate_certificate_link'),
                InlineKeyboardButton("–ù–∞–∑–∞–¥", callback_data='start')
            )

            info_text = """
–í–∞—à —Ç–µ—Å—Ç –Ω–∞ –ø–æ–ª—É—á–µ–Ω–∏–µ —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–∞ –±—ã–ª —É—Å–ø–µ—à–Ω–æ –ø—Ä–æ–π–¥–µ–Ω!
–í—ã –º–æ–∂–µ—Ç–µ —Å–∫–∞—á–∞—Ç—å —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç –≤ —Ñ–æ—Ä–º–∞—Ç–µ PDF –∏–ª–∏ –ø–µ—Ä–µ–π—Ç–∏ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–∞.
–ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º üéâ)
            """
        
        await bot.send_message(
            chat_id=message.chat.id,
            text=info_text,
            parse_mode=ParseMode.HTML,
            reply_markup=keyboard
        )
    elif response["status"] == "error":
        text = response["message"]
        await bot.send_message(
            chat_id=message.chat.id,
            text=text
        )  

async def save_fio(message: types.Message, telegram_id: str, u_name: str = None):
    
    log.info("save_fio called")

    fio_input = message.text.strip()
    fio_value = fio_input.replace("–§–ò–û: ", "").strip()
    if not fio_value.strip():
        await bot.send_message(
            chat_id=message.chat.id,
            text="–§–ò–û –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º"
        )
        return

    save_fio_url = SERVER_URL + "/save_fio"
    user_data = {
        "telegram_id": telegram_id,
        "fio": fio_value,
    }
    response = await send_request(
        save_fio_url,
        method="POST",
        json=user_data
    )
    if response["status"] == "success":
        keyboard = InlineKeyboardMarkup(row_width=1)
        keyboard.add(
            InlineKeyboardButton("–°–∫–∞—á–∞—Ç—å —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç", callback_data='download_certificate'),
            InlineKeyboardButton("–°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å —Å—Å—ã–ª–∫—É", callback_data='generate_certificate_link'),
            InlineKeyboardButton("–ù–∞–∑–∞–¥", callback_data='start')
        )
        text = response["data"]["message"]
        await bot.send_message(
            chat_id=message.chat.id,
            text=text,
            reply_markup=keyboard
        )
    elif response["status"] == "error":
        text = response["message"]
        await bot.send_message(
            chat_id=message.chat.id,
            text=text
        )

async def get_top_referrers(message: types.Message, telegram_id: str, u_name: str = None):
    
    log.info("get_top_referrers called")

    url = SERVER_URL + "/get_top_referrers"
    user_data = {
        "telegram_id": telegram_id
    }
    response = await send_request(
        url,
        method="POST",
        json=user_data
    )
    if response["status"] == "success":
        keyboard = InlineKeyboardMarkup(row_width=1)
        keyboard.add(
            InlineKeyboardButton("–ù–∞–∑–∞–¥", callback_data='earn_new_clients')
        )
        text = response["top"]
        await bot.send_message(
            chat_id=message.chat.id,
            text=text,
            reply_markup=keyboard
        )
    elif response["status"] == "error":
        text = response["message"]
        await bot.send_message(
            chat_id=message.chat.id,
            text=text
        )

async def download_certificate(message: types.Message, telegram_id: str, u_name: str = None):
    
    log.info("download_certificate called")

    await bot.send_message(
        chat_id=message.chat.id,
        text="–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∑–∞–ø—Ä–æ—Å –Ω–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏—é —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–∞..."
    )

    url = SERVER_URL + "/generate_certificate"
    user_data = {"telegram_id": telegram_id}

    keyboard = InlineKeyboardMarkup(row_width=1)
    keyboard.add(InlineKeyboardButton("–ù–∞–∑–∞–¥", callback_data="start"))

    response = await send_request(url, method="POST", json=user_data)

    # 1Ô∏è‚É£ –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Å–µ—Ä–≤–µ—Ä –Ω–µ –≤–µ—Ä–Ω—É–ª –æ—à–∏–±–∫—É
    if isinstance(response, dict):
        if response["status"] == "error":
            text = response["message"]
            await bot.send_message(
                chat_id=message.chat.id,
                text=text
            )
            return

    # 2Ô∏è‚É£ –°–æ–∑–¥–∞—ë–º BytesIO –∏ –∑–∞–¥–∞—ë–º –∏–º—è —Ñ–∞–π–ª–∞
    try:
        file_stream = io.BytesIO(response)  
        file_stream.name = "certificate.pdf"  # Telegram —Ç—Ä–µ–±—É–µ—Ç –∏–º—è —Ñ–∞–π–ª–∞

        # 3Ô∏è‚É£ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–∞–π–ª –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        await message.answer_document(
            InputFile(file_stream, filename="certificate.pdf"),
            reply_markup=keyboard
        )

    except Exception as e:
        log.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–∞: {e}")
        await message.answer("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–∞", reply_markup=keyboard)

async def generate_certificate_link(message: types.Message, telegram_id: str, u_name: str = None):
    
    log.info("generate_certificate_link called")

    await bot.send_message(
        chat_id=message.chat.id,
        text="–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∑–∞–ø—Ä–æ—Å –Ω–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏—é —Å—Å—ã–ª–∫–∏..."
    )

    keyboard = InlineKeyboardMarkup(row_width=1)
    keyboard.add(InlineKeyboardButton("–ù–∞–∑–∞–¥", callback_data="start"))

    text = f"–í—ã –º–æ–∂–µ—Ç–µ –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç –ø–æ —Å–ª–µ–¥—É—é—â–µ–π —Å—Å—ã–ª–∫–µ: {SERVER_URL}/certifications?cert_id={telegram_id}"

    await bot.send_message(
        chat_id=message.chat.id,
        text=text,
        reply_markup=keyboard
    )

async def get_trial(message: types.Message, telegram_id: str, u_name: str = None):
    
    log.info("get_trial called")
    await bot.send_message(
        chat_id=str(MAIN_TELEGRAM_ID),
        text=f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å telegram_id={telegram_id} username={u_name} –Ω–∞–∂–∞–ª –∫–Ω–æ–ø–∫—É /get_trial"
    )

    url = SERVER_URL + "/start_trial"
    user_data = {"telegram_id": telegram_id}

    response = await send_request(url, method="POST", json=user_data)

    if response["status"] == "error":
        text = response["message"]
        await bot.send_message(
            chat_id=message.chat.id,
            text=text
        )

async def fake_buy_course(message: types.Message, telegram_id: str, u_name: str = None):
    
    log.info("fake_buy_course called")

    await bot.send_message(
        chat_id=str(MAIN_TELEGRAM_ID),
        text=f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å telegram_id={telegram_id} username={u_name} –Ω–∞–∂–∞–ª –∫–Ω–æ–ø–∫—É /fake_buy_course"
    )

    get_price_url = SERVER_URL + "/get_payment_data"
    user_data = {"telegram_id": telegram_id}
    response = await send_request(
        get_price_url,
        method="POST",
        json=user_data
    )
    price = response["price"]
    card_number = response["card_number"]

    text = (
    f"–î–ª—è –æ–ø–ª–∞—Ç—ã –∫—É—Ä—Å–∞ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –≤—ã–ø–æ–ª–Ω–∏—Ç—å –±–∞–Ω–∫–æ–≤—Å–∫–∏–π –ø–µ—Ä–µ–≤–æ–¥ –Ω–∞ –Ω–æ–º–µ—Ä –∫–∞—Ä—Ç—ã:\n"
    f"**{card_number}**\n\n"
    f"**–°—É–º–º–∞ –ø–µ—Ä–µ–≤–æ–¥–∞:** {price} —Ä—É–±–ª–µ–π\n\n"
    "*–ë—É–¥—å—Ç–µ –æ—á–µ–Ω—å –≤–Ω–∏–º–∞—Ç–µ–ª—å–Ω—ã, —Ç–∞–∫ –∫–∞–∫ –≤–æ–∑–≤—Ä–∞—Ç –¥–µ–Ω–µ–∂–Ω—ã—Ö —Å—Ä–µ–¥—Å—Ç–≤ –Ω–µ –ø—Ä–µ–¥—É—Å–º–æ—Ç—Ä–µ–Ω.\n\n"
    "–ü–æ—Å–ª–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –ø–µ—Ä–µ–≤–æ–¥–∞ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –±–æ—Ç—É —Å–∫—Ä–∏–Ω—à–æ—Ç, –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–∞—é—â–∏–π —É—Å–ø–µ—à–Ω—É—é –æ–ø–ª–∞—Ç—É.\n"
    "–ü—Ä–∏ —É—Å–ø–µ—à–Ω–æ–π –æ–ø–ª–∞—Ç–µ, –≤—ã –ø–æ–ª—É—á–∏—Ç–µ –ø—Ä–∏–≥–ª–∞—Å–∏—Ç–µ–ª—å–Ω—É—é —Å—Å—ã–ª–∫—É –≤ –≥—Ä—É–ø–ø—É –≤ —Ç–µ—á–µ–Ω–∏–µ 24 —á–∞—Å–æ–≤."
    )
    await bot.send_message(
        chat_id=message.chat.id,
        text=text
    )

async def handle_photo(message: Message, telegram_id: str, u_name: str = None):
    """
    –ü–æ–ª—É—á–∞–µ—Ç —Ñ–æ—Ç–æ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –ø–µ—Ä–µ—Å—ã–ª–∞–µ—Ç –µ–≥–æ –Ω–∞ –∑–∞–¥–∞–Ω–Ω—ã–π Telegram ID.
    """
    log.info(f"–ü–æ–ª—É—á–µ–Ω–∞ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—è –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {telegram_id}")

    try:
        # –ü–æ–ª—É—á–∞–µ–º ID –ø–æ—Å–ª–µ–¥–Ω–µ–π –≤–µ—Ä—Å–∏–∏ —Ñ–æ—Ç–æ (–Ω–∞–∏–≤—ã—Å—à–µ–µ –∫–∞—á–µ—Å—Ç–≤–æ)
        photo_id = message.photo[-1].file_id
        caption = f"{telegram_id}"

        # –ü–µ—Ä–µ—Å—ã–ª–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –æ–ø—Ä–µ–¥–µ–ª—ë–Ω–Ω–æ–º—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        await bot.send_photo(chat_id=MAIN_TELEGRAM_ID, photo=photo_id, caption=caption)
        
        log.info(f"–§–æ—Ç–æ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –∞–¥–º–∏–Ω—É —Å ID: {MAIN_TELEGRAM_ID}")
    
    except Exception as e:
        log.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Ñ–æ—Ç–æ –∞–¥–º–∏–Ω—É: {e}")


async def handle_fake_payment_command(message: types.Message, telegram_id: str, u_name: str = None):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –≥—Ä—É–ø–ø—É.
    """
    log.info(f"handle_fake_payment_command called by {telegram_id}")
    log.info(f"telegram_id {telegram_id}")
    log.info(f"MAIN_TELEGRAM_ID {MAIN_TELEGRAM_ID}")

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç—Ç–æ –∏–º–µ–Ω–Ω–æ –∞–¥–º–∏–Ω –æ—Ç–ø—Ä–∞–≤–∏–ª –∫–æ–º–∞–Ω–¥—É
    if str(telegram_id) == str(MAIN_TELEGRAM_ID):
        log.info(f"main tg id")
        
        add_input = message.text.strip()
        log.info(f"add_input {add_input}")

        new_user_id = add_input.replace("–î–æ–±–∞–≤–∏—Ç—å: ", "").strip()
        log.info(f"new_user_id {new_user_id}")

        if not new_user_id.strip():
            await bot.send_message(
                chat_id=message.chat.id,
                text="TG id –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º"
            )
            return
        
        fake_payment_url = SERVER_URL + "/fake_payment"
        user_data = {"telegram_id": new_user_id}
        response = await send_request(
            fake_payment_url,
            method="POST",
            json=user_data
        )
        if response["status"] == "success":
            text = "–î–æ–±–∞–≤–ª–µ–Ω"
            await bot.send_message(
                chat_id=message.chat.id,
                text=text
            )
        elif response["status"] == "error":
            text = response["message"]
            await bot.send_message(
                chat_id=message.chat.id,
                text=text
            )

BLACKLIST = set()

async def ban_user_by_id(message: types.Message, telegram_id: str, u_name: str = None):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
    """
    log.info(f"ban_user_by_id called by {MAIN_TELEGRAM_ID} = {telegram_id}")

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç—Ç–æ –∏–º–µ–Ω–Ω–æ –∞–¥–º–∏–Ω –æ—Ç–ø—Ä–∞–≤–∏–ª –∫–æ–º–∞–Ω–¥—É
    if str(telegram_id) == str(MAIN_TELEGRAM_ID):
        log.info(f"main tg id")
        
        id_input = message.text.strip()
        log.info(f"id_input {id_input}")

        tg_id = id_input.replace("–ë–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å: ", "").strip()
        log.info(f"tg_id {tg_id}")

        if not tg_id.strip():
            await bot.send_message(
                chat_id=message.chat.id,
                text="TG id –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º"
            )
            return

        log.info(f"message.chat.id {message.chat.id}")
        log.info(f"tg_id {tg_id}")
        
        BLACKLIST.add(str(tg_id))
        await bot.send_message(
            chat_id=message.chat.id,
            text=f"–ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω. –ê–∫—Ç—É–∞–ª—å–Ω—ã–π —Å–ø–∏—Å–æ–∫ {BLACKLIST}"
        )

async def unban_user_by_id(message: types.Message, telegram_id: str, u_name: str = None):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
    """
    log.info(f"unban_user_by_id called by {MAIN_TELEGRAM_ID} = {telegram_id}")

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç—Ç–æ –∏–º–µ–Ω–Ω–æ –∞–¥–º–∏–Ω –æ—Ç–ø—Ä–∞–≤–∏–ª –∫–æ–º–∞–Ω–¥—É
    if str(telegram_id) == str(MAIN_TELEGRAM_ID):
        log.info(f"main tg id")
        
        id_input = message.text.strip()
        log.info(f"id_input {id_input}")

        tg_id = id_input.replace("–†–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å: ", "").strip()
        log.info(f"tg_id {tg_id}")

        if not tg_id.strip():
            await bot.send_message(
                chat_id=message.chat.id,
                text="TG id –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º"
            )
            return
        
        BLACKLIST.remove(str(tg_id))
        await bot.send_message(
            chat_id=message.chat.id,
            text=f"–†–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω. –ê–∫—Ç—É–∞–ª—å–Ω—ã–π —Å–ø–∏—Å–æ–∫ {BLACKLIST}"
        )

async def kick_user_by_id(message: types.Message, telegram_id: str, u_name: str = None):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã –∏—Å–∫–ª—é—á–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –≥—Ä—É–ø–ø—ã.
    """
    log.info(f"kick_user_by_id called by {MAIN_TELEGRAM_ID} = {telegram_id}")

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç—Ç–æ –∏–º–µ–Ω–Ω–æ –∞–¥–º–∏–Ω –æ—Ç–ø—Ä–∞–≤–∏–ª –∫–æ–º–∞–Ω–¥—É
    if str(telegram_id) == str(MAIN_TELEGRAM_ID):
        log.info(f"main tg id")
        
        id_input = message.text.strip()
        log.info(f"id_input {id_input}")

        tg_id = id_input.replace("–í—ã–≥–Ω–∞—Ç—å: ", "").strip()
        log.info(f"tg_id {tg_id}")

        if not tg_id.strip():
            await bot.send_message(
                chat_id=message.chat.id,
                text="TG id –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º"
            )
            return
        
        await bot.kick_chat_member(chat_id=GROUP_ID, user_id=tg_id)
        await bot.unban_chat_member(chat_id=GROUP_ID, user_id=tg_id)
        text = "–í—ã–≥–Ω–∞–ª"
        await bot.send_message(
            chat_id=message.chat.id,
            text=text
        )
            